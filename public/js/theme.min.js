(()=>{var Q=(e,o)=>()=>(o||e((o={exports:{}}).exports,o),o.exports);var W=Q((be,U)=>{U.exports=window.Tablesort});var ee=W();function X(){return document.documentElement&&document.documentElement.scrollTop||document.body.scrollTop}function te(){let e=document.getElementById("menu-toggle-mobile"),o=document.getElementById("menu-mobile");window.menuToggleMobileEventListener||(e.addEventListener("click",()=>{document.body.classList.toggle("blur"),e.classList.toggle("active"),o.classList.toggle("active")}),window.menuToggleMobileEventListener=!0),window._menuMobileOnClickMask=()=>{e.classList.remove("active"),o.classList.remove("active")},window.clickMaskEventSet.add(window._menuMobileOnClickMask)}function D(e){window.setTheme(e),window.saveTheme(e)}function oe(){Array.from(document.getElementsByClassName("theme-switch")).forEach(e=>{e.addEventListener("click",()=>{let o=document.body.getAttribute("theme");D(o==="dark"?"light":"dark");for(let t of window.switchThemeEventSet)t()})})}function ne(){Array.from(document.getElementsByClassName("color-theme-select")).forEach(e=>{let o=document.body.getAttribute("theme");for(let t=0;t<e.options.length;t++)if(e.options[t].value===o){e.selectedIndex=t;break}e.addEventListener("change",()=>{let t=e.value;window.localStorage&&localStorage.setItem("theme",t),t!=="auto"?D(t):window.matchMedia&&window.matchMedia("(prefers-color-scheme: dark)").matches?D("dark"):D("light");for(let i of window.switchThemeEventSet)i()})})}function Y(){let e=window.config.search,o=window.matchMedia&&window.matchMedia("only screen and (max-width: 680px)").matches;if(!e||o&&window._searchMobileOnce||!o&&window._searchDesktopOnce)return;let t=e.maxResultLength?e.maxResultLength:10,i=e.snippetLength?e.snippetLength:50,n=e.highlightTag?e.highlightTag:"em",s=e.isCaseSensitive?e.isCaseSensitive:!1,u=e.minMatchCharLength?e.minMatchCharLength:1,w=e.findAllMatches?e.findAllMatches:!1,g=e.location?e.location:0,M=e.threshold?e.threshold:.3,A=e.distance?e.distance:100,v=e.ignoreLocation?e.ignoreLocation:!1,H=e.useExtendedSearch?e.useExtendedSearch:!1,q=e.ignoreFieldNorm?e.ignoreFieldNorm:!1,T=e.termFrequency?e.termFrequency:1,O=e.pageLength?e.pageLength:.75,r=e.termSimilarity?e.termSimilarity:1,F=e.termSaturation?e.termSaturation:1.4,L=o?"mobile":"desktop",$=document.getElementById(`header-${L}`),_=document.getElementById(`search-input-${L}`),N=document.getElementById(`search-toggle-${L}`),B=document.getElementById(`search-loading-${L}`),f=document.getElementById(`search-clear-${L}`),V=window.config["autocomplete.min.js"],P=window.config["algoliasearch.min.js"],Z=window.config["pagefind.js"],G=window.config["fuse.min.js"];if(o)window._searchMobileOnce=!0,_.addEventListener("focus",()=>{C("autocomplete-script",V,()=>{J(),_.focus()}),window.config?.search?.type==="algolia"?C("algolia-script",P,null):window.config?.search?.type==="fuse"?C("fuse-script",G,null):z(),document.body.classList.add("blur"),$.classList.add("open"),_.focus()}),document.getElementById("search-cancel-mobile").addEventListener("click",()=>{$.classList.remove("open"),document.body.classList.remove("blur"),document.getElementById("menu-toggle-mobile").classList.remove("active"),document.getElementById("menu-mobile").classList.remove("active"),B.style.display="none",f.style.display="none",window._searchMobile&&window._searchMobile.autocomplete.setVal("")}),f.addEventListener("click",()=>{f.style.display="none",window._searchMobile&&window._searchMobile.autocomplete.setVal("")},!1),window._searchMobileOnClickMask=()=>{$.classList.remove("open"),B.style.display="none",f.style.display="none",window._searchMobile&&window._searchMobile.autocomplete.setVal("")},window.clickMaskEventSet.add(window._searchMobileOnClickMask);else{let p=function(){C("autocomplete-script",V,()=>{J()}),window.config?.search?.type==="algolia"?C("algolia-script",P,null):window.config?.search?.type==="fuse"?C("fuse-script",G,null):z()};window._searchDesktopOnce=!0,N.addEventListener("mouseover",p,{once:!0}),N.addEventListener("click",()=>{p(),document.body.classList.add("blur"),$.classList.add("open"),_.focus()}),f.addEventListener("click",()=>{f.style.display="none",window._searchDesktop&&window._searchDesktop.autocomplete.setVal("")}),document.addEventListener("keydown",a=>{a.ctrlKey&&a.code==="KeyK"&&(a.preventDefault(),N.click())}),window._searchDesktopOnClickMask=()=>{$.classList.remove("open"),B.style.display="none",f.style.display="none",window._searchDesktop&&window._searchDesktop.autocomplete.setVal("")},window.clickMaskEventSet.add(window._searchDesktopOnClickMask)}_.addEventListener("input",()=>{_.value===""?f.style.display="none":f.style.display="inline"});let J=()=>{let p=autocomplete(`#search-input-${L}`,{hint:!1,autoselect:!0,dropdownMenuContainer:`#search-dropdown-${L}`,clearOnSelected:!1,cssClasses:{noPrefix:!0},debug:!0},{name:"search",source:(a,S)=>{B.style.display="inline",f.style.display="none";let m=c=>{B.style.display="none",f.style.display="inline",S(c)};if(e.type==="algolia")window._algoliaIndex=window._algoliaIndex||algoliasearch(e.algoliaAppID,e.algoliaSearchKey).initIndex(e.algoliaIndex),window._algoliaIndex.search(a,{offset:0,length:t*8,attributesToHighlight:["title"],attributesToRetrieve:["*"],attributesToSnippet:[`content:${i}`],highlightPreTag:`<${n}>`,highlightPostTag:`</${n}>`}).then(({hits:c})=>{let l={};c.forEach(({uri:d,date:I,_highlightResult:{title:y},_snippetResult:{content:k}})=>{l[d]&&l[d].context.length>k.value||(l[d]={uri:d,title:y.value,date:I,context:k.value})}),m(Object.values(l).slice(0,t))}).catch(c=>{console.error(c),m([])});else if(e.type==="fuse"){let c=()=>{let l={};return window._fuseIndex.search(a).forEach(({item:d,refIndex:I,matches:y})=>{let k=d.title,x=d.content;y.forEach(({indices:E,value:pe,key:K})=>{if(K==="content"){let b=0;for(let h=0;h<E.length;h++){let j=x.substring(E[h][0]+b,E[h][1]+1+b),R=`<${n}>`+j+`</${n}>`;x=x.substring(0,E[h][0]+b)+R+x.substring(E[h][1]+1+b,x.length),b+=n.length*2+5}}else if(K==="title"){let b=0;for(let h=0;h<E.length;h++){let j=k.substring(E[h][0]+b,E[h][1]+1+b),R=`<${n}>`+j+`</${n}>`;k=k.substring(0,E[h][0]+b)+R+k.substring(E[h][1]+1+b,x.length),b+=n.length*2+5}}}),l[d.uri]={uri:d.uri,title:k,date:d.date,context:x}}),console.log(l),Object.values(l).slice(0,t)};window._fuseIndex?m(c()):fetch(e.fuseIndexURL).then(l=>l.json()).then(l=>{let d={isCaseSensitive:s,findAllMatches:w,minMatchCharLength:u,location:g,threshold:M,distance:A,ignoreLocation:v,useExtendedSearch:H,ignoreFieldNorm:q,includeScore:!1,shouldSort:!0,includeMatches:!0,keys:["content","title"]};window._fuseIndex=new Fuse(l,d),m(c())}).catch(l=>{console.error(l),m([])})}else window._pgfIndex===void 0&&z(),window._pgfIndex.debouncedSearch(a,300).then(c=>{if(c===null||!("results"in c)){m([]);return}Promise.all(c.results.slice(0,t).map(l=>l.data())).then(l=>{let d={};for(let I of l)for(let y of I.sub_results)y.url===void 0||!("anchor"in y)||y.anchor.element!="h2"||(d[y.url]={uri:y.url,title:I.meta.title,date:I.meta.date,context:n==="mark"?y.excerpt:y.excerpt.replace(/<mark>(.*?)<\/mark>/gi,`<${n}>$1</${n}>`)});m(Object.values(d))})})},templates:{suggestion:({title:a,uri:S,date:m,context:c})=>`<div><a href=${S}><span class="suggestion-title">${a}</span></a><span class="suggestion-date">${m}</span></div><div class="suggestion-context">${c}</div>`,empty:({query:a})=>`<div class="search-empty">${e.noResultsFound}: <span class="search-query">"${a}"</span></div>`,footer:()=>{let{searchType:a,icon:S,href:m}=e.type==="algolia"?{searchType:"algolia",icon:'<svg class="icon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M229.3 182.6c-49.3 0-89.2 39.9-89.2 89.2 0 49.3 39.9 89.2 89.2 89.2s89.2-39.9 89.2-89.2c0-49.3-40-89.2-89.2-89.2zm62.7 56.6l-58.9 30.6c-1.8.9-3.8-.4-3.8-2.3V201c0-1.5 1.3-2.7 2.7-2.6 26.2 1 48.9 15.7 61.1 37.1.7 1.3.2 3-1.1 3.7zM389.1 32H58.9C26.4 32 0 58.4 0 90.9V421c0 32.6 26.4 59 58.9 59H389c32.6 0 58.9-26.4 58.9-58.9V90.9C448 58.4 421.6 32 389.1 32zm-202.6 84.7c0-10.8 8.7-19.5 19.5-19.5h45.3c10.8 0 19.5 8.7 19.5 19.5v15.4c0 1.8-1.7 3-3.3 2.5-12.3-3.4-25.1-5.1-38.1-5.1-13.5 0-26.7 1.8-39.4 5.5-1.7.5-3.4-.8-3.4-2.5v-15.8zm-84.4 37l9.2-9.2c7.6-7.6 19.9-7.6 27.5 0l7.7 7.7c1.1 1.1 1 3-.3 4-6.2 4.5-12.1 9.4-17.6 14.9-5.4 5.4-10.4 11.3-14.8 17.4-1 1.3-2.9 1.5-4 .3l-7.7-7.7c-7.6-7.5-7.6-19.8 0-27.4zm127.2 244.8c-70 0-126.6-56.7-126.6-126.6s56.7-126.6 126.6-126.6c70 0 126.6 56.6 126.6 126.6 0 69.8-56.7 126.6-126.6 126.6z"/></svg>',href:"https://www.algolia.com/"}:e.type==="fuse"?{searchType:"Fuse.js",icon:"",href:"https://fusejs.io/"}:{searchType:"pagefind",icon:"",href:"https://pagefind.app"};return`<div class="search-footer">Search by <a href="${m}" rel="noopener noreffer" target="_blank">${S} ${a}</a></div>`}}});p.on("autocomplete:selected",(a,S,m,c)=>{a.preventDefault()}),o?window._searchMobile=p:window._searchDesktop=p};function C(p,a,S){if(document.querySelector(`#${p}`)===null){let m=document.querySelector("head"),c=document.createElement("script");c.setAttribute("src",a),c.setAttribute("id",p),c.onload=S,m.appendChild(c)}}function z(){import(Z).then(p=>{window._pgfIndex=p,window._pgfIndex.options({excerptLength:i,termFrequency:T,pageLength:O,termSimilarity:r,termSaturation:F}).then(()=>{window._pgfIndex.init()})})}}function ie(){document.querySelectorAll(".details").forEach(e=>{let o=e.getElementsByClassName("details-summary")[0],t=o.nextElementSibling;e.classList.contains("open")&&(t.style.maxHeight="fit-content"),o.addEventListener("click",()=>{e.classList.contains("open")?t.style.maxHeight="0px":t.style.maxHeight="fit-content",e.classList.toggle("open")},!1),addEventListener("beforeprint",()=>{e.classList.contains("open")||o.click()})})}function se(){window.config.lightGallery&&lightGallery(document.getElementById("content"),window.config.lightGallery)}function ce(){window.config?.table?.sort&&document.querySelectorAll(".content table").forEach(e=>new ee(e))}function le(){let e=document.getElementById("TableOfContents");if(e===null)return;let o=window.matchMedia&&window.matchMedia("only screen and (max-width: 1000px)").matches;if(document.getElementById("toc-static").getAttribute("kept")||o)window._tocOnScroll&&window.scrollEventSet.delete(window._tocOnScroll);else{let t=document.getElementById("toc-auto"),i=e.querySelectorAll("a:first-child"),n=e.getElementsByTagName("li"),s=document.getElementsByClassName("headerLink"),u=document.body.getAttribute("header-desktop")!=="normal",w=document.getElementById("header-desktop").offsetHeight,g=20+(u?w:0),M=t.offsetTop,A=M-g+(u?0:w);window._tocOnScroll=window._tocOnScroll||(()=>{let H=document.getElementById("post-footer").offsetTop-t.getBoundingClientRect().height,q=H-g+(u?0:w);if(window.newScrollTop<A?(t.style.position="absolute",t.style.top=`${M}px`):window.newScrollTop>q?(t.style.position="absolute",t.style.top=`${H}px`):(t.style.position="fixed",t.style.top=`${g}px`),i.length===0)return;let T=-1,O=g+window.newScrollTop;if(s.length>0)if(s[s.length-1].offsetTop<O)T=s.length-1;else for(let r=0;r<s.length-1;r++){let F=s[r].offsetTop,L=s[r+1].offsetTop;if(F<=O&&L>O){T=r;break}}if(Array.from(i).forEach(r=>r.classList.remove("active")),Array.from(n).forEach(r=>r.classList.remove("has-active")),T>=0&&T<i.length){i[T].classList.add("active");let r=i[T].parentElement;for(;r!==e;)r.classList.add("has-active"),r=r.parentElement.parentElement}}),window._tocOnScroll(),window.scrollEventSet.add(window._tocOnScroll)}}function ae(){let e=document.querySelector("#toc-dialog"),o=document.querySelector("#toc-drawer-button");!e||!o||(o.addEventListener("click",()=>{e.showModal(),document.activeElement?.blur()}),e.addEventListener("click",t=>{e.close()}))}function re(){window.config.mapbox&&(mapboxgl.accessToken=window.config.mapbox.accessToken,mapboxgl.setRTLTextPlugin(window.config.mapbox.RTLTextPlugin),window._mapboxArr=window._mapboxArr||[],Array.from(document.getElementsByClassName("mapbox")).forEach(e=>{let{lng:o,lat:t,zoom:i,lightStyle:n,darkStyle:s,marked:u,navigation:w,geolocate:g,scale:M,fullscreen:A}=window.config.data[e.id],v=new mapboxgl.Map({container:e,center:[o,t],zoom:i,minZoom:.2,style:window.isDark?s:n,attributionControl:!1});u&&new mapboxgl.Marker().setLngLat([o,t]).addTo(v),w&&v.addControl(new mapboxgl.NavigationControl,"bottom-right"),g&&v.addControl(new mapboxgl.GeolocateControl({positionOptions:{enableHighAccuracy:!0},showUserLocation:!0,trackUserLocation:!0}),"bottom-right"),M&&v.addControl(new mapboxgl.ScaleControl),A&&v.addControl(new mapboxgl.FullscreenControl),v.addControl(new MapboxLanguage),window._mapboxArr.push(v)}),window._mapboxOnSwitchTheme=()=>{window._mapboxArr.forEach(e=>{let o=e.getContainer(),{lightStyle:t,darkStyle:i}=window.config.data[o.id];e.setStyle(window.isDark?i:t),e.addControl(new MapboxLanguage)})},window.switchThemeEventSet.add(window._mapboxOnSwitchTheme))}function de(){if(window.config.typeit){let e=window.config.typeit,o=e.speed?e.speed:100,t=e.cursorSpeed?e.cursorSpeed:1e3,i=e.cursorChar?e.cursorChar:"|";Object.values(e.data).forEach(n=>{let s=u=>{let w=n[u];if(!document.getElementById(w).hasAttribute("data-typeit-id")){let g=new TypeIt(`#${w}`,{strings:window.config.data[w],speed:o,lifeLike:!0,cursorSpeed:t,cursorChar:i,waitUntilVisible:!0,afterComplete:()=>{if(u===n.length-1){e.duration>=0&&window.setTimeout(()=>{g.destroy()},e.duration);return}g.destroy(),s(u+1)}}).go()}};s(0)})}}function ue(){function e(i){let n=document.getElementsByTagName("meta");for(let s=0;s<n.length;s++)if(n[s].getAttribute("name")===i)return n[s]}let o=e("theme-color"),t={light:"#f8f8f8",dark:"#161b22"};window._metaThemeColorOnSwitchTheme=()=>{o.content=t[document.body.getAttribute("theme")]},window.switchThemeEventSet.add(window._metaThemeColorOnSwitchTheme),window._metaThemeColorOnSwitchTheme()}function me(){let e=document.getElementById("back-to-top-button");function o(){window.newScrollTop=X(),window.newScrollTop>20?e.style.opacity="1":e.style.opacity="0";for(let t of window.scrollEventSet)t();window.oldScrollTop=window.newScrollTop}window.addEventListener("scroll",o,!1)}function we(){window.addEventListener("resize",()=>{window._resizeTimeout||(window._resizeTimeout=window.setTimeout(()=>{window._resizeTimeout=null;for(let e of window.resizeEventSet)e();Y()},100))},!1)}function he(){document.getElementById("mask").addEventListener("click",()=>{for(let e of window.clickMaskEventSet)e();document.body.classList.remove("blur")},!1)}function ge(){document.querySelectorAll(".code-block").forEach(e=>{let o=e.querySelector("button.code-block-button"),t=e.querySelector("code.chroma"),i=e.querySelector("button.copy-code-button"),n=i.querySelector("span.copy-icon"),s=i.querySelector("span.check-icon"),u=e.querySelector("button.wrap-code-button"),w=e.querySelector("button.line-number-button");t.style.maxHeight="fit-content",o.addEventListener("click",()=>{e.classList.toggle("is-open"),e.classList.toggle("is-closed")}),i?.addEventListener("click",()=>{navigator.clipboard.writeText(t.textContent),n.style.display="none",s.style.display="block",setTimeout(()=>{n.style.display="block",s.style.display="none"},3e3)}),u?.addEventListener("click",()=>{t.style.maxHeight="fit-content",e.classList.toggle("is-wrap")}),w.addEventListener("click",()=>{e.classList.toggle("show-line-numbers")}),addEventListener("beforeprint",g=>{e.classList.contains("is-closed")&&o.click(),e.classList.contains("is-wrap")||u.click()})})}function fe(){window.isDark=document.body.getAttribute("theme")!=="light",window.newScrollTop=X(),window.oldScrollTop=window.newScrollTop,window.scrollEventSet=new Set,window.resizeEventSet=new Set,window.clickMaskEventSet=new Set,te(),oe(),ne(),ue(),Y(),ge(),ie(),se(),ce(),de(),re(),le(),ae(),me(),we(),he()}fe();})();
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibnMtaHVnby1pbXA6L21udC9kL2J1ZDE3NS5naXRodWIuaW8vdGhlbWVzL0RvSXQvYXNzZXRzL2pzL3NoaW1zL3RhYmxlc29ydC5qcyIsICI8c3RkaW4+Il0sCiAgInNvdXJjZXNDb250ZW50IjogWyJtb2R1bGUuZXhwb3J0cyA9IHdpbmRvdy5UYWJsZXNvcnQ7XG4iLCAiZXhwb3J0IHt9O1xuXG4vLyBUT0RPOiBhZGQgbW9yZSBnbG9iYWwgc3RhdGVzIHRvIHRoZSB3aW5kb3cgb2JqZWN0XG5kZWNsYXJlIGdsb2JhbCB7XG4gIGludGVyZmFjZSBXaW5kb3cge1xuICAgIGlzRGFyazogYm9vbGVhbjtcbiAgICBjb25maWc/OiB7XG4gICAgICB0YWJsZT86IHtcbiAgICAgICAgc29ydD86IGJvb2xlYW47XG4gICAgICB9O1xuICAgIH07XG4gIH1cbn1cblxuY29uc3QgVGFibGVzb3J0ID0gcmVxdWlyZShcInRhYmxlc29ydFwiKTtcblxuZnVuY3Rpb24gZ2V0U2Nyb2xsVG9wKCkge1xuICByZXR1cm4gKFxuICAgIChkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQgJiYgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNjcm9sbFRvcCkgfHxcbiAgICBkb2N1bWVudC5ib2R5LnNjcm9sbFRvcFxuICApO1xufVxuXG4vKipcbiAqIEluaXRpYWxpemUgdGhlIG1vYmlsZSBtZW51IGJhci5cbiAqL1xuZnVuY3Rpb24gaW5pdE1lbnVNb2JpbGUoKSB7XG4gIGNvbnN0IG1lbnVUb2dnbGVNb2JpbGUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcIm1lbnUtdG9nZ2xlLW1vYmlsZVwiKTtcbiAgY29uc3QgbWVudU1vYmlsZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwibWVudS1tb2JpbGVcIik7XG4gIC8vIElmIG5vIGV2ZW50IGxpc3RlbmVyIGhhcyBiZWVuIHJlZ2lzdGVyZWQgeWV0LCBhZGQgb25lLlxuICBpZiAoIXdpbmRvdy5tZW51VG9nZ2xlTW9iaWxlRXZlbnRMaXN0ZW5lcikge1xuICAgIG1lbnVUb2dnbGVNb2JpbGUuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcbiAgICAgIGRvY3VtZW50LmJvZHkuY2xhc3NMaXN0LnRvZ2dsZShcImJsdXJcIik7XG4gICAgICBtZW51VG9nZ2xlTW9iaWxlLmNsYXNzTGlzdC50b2dnbGUoXCJhY3RpdmVcIik7XG4gICAgICBtZW51TW9iaWxlLmNsYXNzTGlzdC50b2dnbGUoXCJhY3RpdmVcIik7XG4gICAgfSk7XG4gICAgd2luZG93Lm1lbnVUb2dnbGVNb2JpbGVFdmVudExpc3RlbmVyID0gdHJ1ZTtcbiAgfVxuICAvLyBSZW1vdmUgdGhlIG1hc2sgd2hlbiBjbGljayBvbiBpdC5cbiAgd2luZG93Ll9tZW51TW9iaWxlT25DbGlja01hc2sgPSAoKSA9PiB7XG4gICAgbWVudVRvZ2dsZU1vYmlsZS5jbGFzc0xpc3QucmVtb3ZlKFwiYWN0aXZlXCIpO1xuICAgIG1lbnVNb2JpbGUuY2xhc3NMaXN0LnJlbW92ZShcImFjdGl2ZVwiKTtcbiAgfTtcbiAgd2luZG93LmNsaWNrTWFza0V2ZW50U2V0LmFkZCh3aW5kb3cuX21lbnVNb2JpbGVPbkNsaWNrTWFzayk7XG59XG5cbi8qKlxuICogU2V0IHRoZSBjb2xvciB0aGVtZVxuICogQHBhcmFtIHtzdHJpbmd9IHRoZW1lXG4gKi9cbmZ1bmN0aW9uIHNldENvbG9yVGhlbWUodGhlbWUpIHtcbiAgd2luZG93LnNldFRoZW1lKHRoZW1lKTtcbiAgd2luZG93LnNhdmVUaGVtZSh0aGVtZSk7XG59XG5cbi8qKlxuICogSW5pdGlhbGl6ZSB0aGUgc3dpdGNoIHRoZW1lIGJ1dHRvbi5cbiAqL1xuZnVuY3Rpb24gaW5pdFN3aXRjaFRoZW1lKCkge1xuICBBcnJheS5mcm9tKGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoXCJ0aGVtZS1zd2l0Y2hcIikpLmZvckVhY2goXG4gICAgKHRoZW1lU3dpdGNoKSA9PiB7XG4gICAgICB0aGVtZVN3aXRjaC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xuICAgICAgICBjb25zdCBjdXJyZW50VGhlbWUgPSBkb2N1bWVudC5ib2R5LmdldEF0dHJpYnV0ZShcInRoZW1lXCIpO1xuICAgICAgICBpZiAoY3VycmVudFRoZW1lID09PSBcImRhcmtcIikge1xuICAgICAgICAgIHNldENvbG9yVGhlbWUoXCJsaWdodFwiKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzZXRDb2xvclRoZW1lKFwiZGFya1wiKTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGNvbnN0IGV2ZW50IG9mIHdpbmRvdy5zd2l0Y2hUaGVtZUV2ZW50U2V0KSBldmVudCgpO1xuICAgICAgfSk7XG4gICAgfSxcbiAgKTtcbn1cblxuLyoqXG4gKiBJbml0aWFsaXplIHRoZSBzZWxlY3QgdGhlbWUgYnV0dG9uLlxuICovXG5mdW5jdGlvbiBpbml0U2VsZWN0VGhlbWUoKSB7XG4gIEFycmF5LmZyb20oZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZShcImNvbG9yLXRoZW1lLXNlbGVjdFwiKSkuZm9yRWFjaChcbiAgICAodGhlbWVTZWxlY3QpID0+IHtcbiAgICAgIC8vIEdldCB0aGUgY3VycmVudCB0aGVtZVxuICAgICAgY29uc3QgY3VycmVudFRoZW1lID0gZG9jdW1lbnQuYm9keS5nZXRBdHRyaWJ1dGUoXCJ0aGVtZVwiKTtcbiAgICAgIC8vIFNldCB0aGUgc2VsZWN0ZWQgSW5kZXhcbiAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgdGhlbWVTZWxlY3Qub3B0aW9ucy5sZW5ndGg7IGorKykge1xuICAgICAgICBjb25zdCBpID0gdGhlbWVTZWxlY3Qub3B0aW9uc1tqXTtcbiAgICAgICAgaWYgKGkudmFsdWUgPT09IGN1cnJlbnRUaGVtZSkge1xuICAgICAgICAgIHRoZW1lU2VsZWN0LnNlbGVjdGVkSW5kZXggPSBqO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHRoZW1lU2VsZWN0LmFkZEV2ZW50TGlzdGVuZXIoXCJjaGFuZ2VcIiwgKCkgPT4ge1xuICAgICAgICBjb25zdCB0aGVtZSA9IHRoZW1lU2VsZWN0LnZhbHVlO1xuICAgICAgICB3aW5kb3cubG9jYWxTdG9yYWdlICYmIGxvY2FsU3RvcmFnZS5zZXRJdGVtKFwidGhlbWVcIiwgdGhlbWUpO1xuICAgICAgICBpZiAodGhlbWUgIT09IFwiYXV0b1wiKSB7XG4gICAgICAgICAgc2V0Q29sb3JUaGVtZSh0aGVtZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKFxuICAgICAgICAgICAgd2luZG93Lm1hdGNoTWVkaWEgJiZcbiAgICAgICAgICAgIHdpbmRvdy5tYXRjaE1lZGlhKFwiKHByZWZlcnMtY29sb3Itc2NoZW1lOiBkYXJrKVwiKS5tYXRjaGVzXG4gICAgICAgICAgKSB7XG4gICAgICAgICAgICBzZXRDb2xvclRoZW1lKFwiZGFya1wiKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc2V0Q29sb3JUaGVtZShcImxpZ2h0XCIpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBmb3IgKGNvbnN0IGV2ZW50IG9mIHdpbmRvdy5zd2l0Y2hUaGVtZUV2ZW50U2V0KSBldmVudCgpO1xuICAgICAgfSk7XG4gICAgfSxcbiAgKTtcbn1cblxuLyoqXG4gKiBJbml0aWFsaXplIHRoZSBzZWFyY2ggYm94LlxuICogQHJldHVybnMge251bGx9XG4gKi9cbmZ1bmN0aW9uIGluaXRTZWFyY2goKSB7XG4gIGNvbnN0IHNlYXJjaENvbmZpZyA9IHdpbmRvdy5jb25maWcuc2VhcmNoO1xuICBjb25zdCBpc01vYmlsZSA9XG4gICAgd2luZG93Lm1hdGNoTWVkaWEgJiZcbiAgICB3aW5kb3cubWF0Y2hNZWRpYShcIm9ubHkgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA2ODBweClcIikubWF0Y2hlcztcbiAgLy8gSWYgdGhlcmUgaXMgbm8gc2VhcmNoIGNvbmZpZ1xuICAvLyBPciB0aGUgc2VhcmNoIGhhcyBiZWVuIGluaXRpYWxpemVkIGFscmVhZHlcbiAgLy8gUmV0dXJuIGRpcmVjdGx5XG4gIGlmIChcbiAgICAhc2VhcmNoQ29uZmlnIHx8XG4gICAgKGlzTW9iaWxlICYmIHdpbmRvdy5fc2VhcmNoTW9iaWxlT25jZSkgfHxcbiAgICAoIWlzTW9iaWxlICYmIHdpbmRvdy5fc2VhcmNoRGVza3RvcE9uY2UpXG4gIClcbiAgICByZXR1cm47XG5cbiAgLy8gSW5pdGlhbGl6ZSBkZWZhdWx0IHNlYXJjaCBjb25maWdcbiAgY29uc3QgbWF4UmVzdWx0TGVuZ3RoID0gc2VhcmNoQ29uZmlnLm1heFJlc3VsdExlbmd0aFxuICAgID8gc2VhcmNoQ29uZmlnLm1heFJlc3VsdExlbmd0aFxuICAgIDogMTA7XG4gIGNvbnN0IHNuaXBwZXRMZW5ndGggPSBzZWFyY2hDb25maWcuc25pcHBldExlbmd0aFxuICAgID8gc2VhcmNoQ29uZmlnLnNuaXBwZXRMZW5ndGhcbiAgICA6IDUwO1xuICBjb25zdCBoaWdobGlnaHRUYWcgPSBzZWFyY2hDb25maWcuaGlnaGxpZ2h0VGFnXG4gICAgPyBzZWFyY2hDb25maWcuaGlnaGxpZ2h0VGFnXG4gICAgOiBcImVtXCI7XG4gIGNvbnN0IGlzQ2FzZVNlbnNpdGl2ZSA9IHNlYXJjaENvbmZpZy5pc0Nhc2VTZW5zaXRpdmVcbiAgICA/IHNlYXJjaENvbmZpZy5pc0Nhc2VTZW5zaXRpdmVcbiAgICA6IGZhbHNlO1xuICBjb25zdCBtaW5NYXRjaENoYXJMZW5ndGggPSBzZWFyY2hDb25maWcubWluTWF0Y2hDaGFyTGVuZ3RoXG4gICAgPyBzZWFyY2hDb25maWcubWluTWF0Y2hDaGFyTGVuZ3RoXG4gICAgOiAxO1xuICBjb25zdCBmaW5kQWxsTWF0Y2hlcyA9IHNlYXJjaENvbmZpZy5maW5kQWxsTWF0Y2hlc1xuICAgID8gc2VhcmNoQ29uZmlnLmZpbmRBbGxNYXRjaGVzXG4gICAgOiBmYWxzZTtcbiAgY29uc3QgbG9jYXRpb24gPSBzZWFyY2hDb25maWcubG9jYXRpb24gPyBzZWFyY2hDb25maWcubG9jYXRpb24gOiAwO1xuICBjb25zdCB0aHJlc2hvbGQgPSBzZWFyY2hDb25maWcudGhyZXNob2xkID8gc2VhcmNoQ29uZmlnLnRocmVzaG9sZCA6IDAuMztcbiAgY29uc3QgZGlzdGFuY2UgPSBzZWFyY2hDb25maWcuZGlzdGFuY2UgPyBzZWFyY2hDb25maWcuZGlzdGFuY2UgOiAxMDA7XG4gIGNvbnN0IGlnbm9yZUxvY2F0aW9uID0gc2VhcmNoQ29uZmlnLmlnbm9yZUxvY2F0aW9uXG4gICAgPyBzZWFyY2hDb25maWcuaWdub3JlTG9jYXRpb25cbiAgICA6IGZhbHNlO1xuICBjb25zdCB1c2VFeHRlbmRlZFNlYXJjaCA9IHNlYXJjaENvbmZpZy51c2VFeHRlbmRlZFNlYXJjaFxuICAgID8gc2VhcmNoQ29uZmlnLnVzZUV4dGVuZGVkU2VhcmNoXG4gICAgOiBmYWxzZTtcbiAgY29uc3QgaWdub3JlRmllbGROb3JtID0gc2VhcmNoQ29uZmlnLmlnbm9yZUZpZWxkTm9ybVxuICAgID8gc2VhcmNoQ29uZmlnLmlnbm9yZUZpZWxkTm9ybVxuICAgIDogZmFsc2U7XG4gIGNvbnN0IHRlcm1GcmVxdWVuY3kgPSBzZWFyY2hDb25maWcudGVybUZyZXF1ZW5jeVxuICAgID8gc2VhcmNoQ29uZmlnLnRlcm1GcmVxdWVuY3lcbiAgICA6IDEuMDtcbiAgY29uc3QgcGFnZUxlbmd0aCA9IHNlYXJjaENvbmZpZy5wYWdlTGVuZ3RoID8gc2VhcmNoQ29uZmlnLnBhZ2VMZW5ndGggOiAwLjc1O1xuICBjb25zdCB0ZXJtU2ltaWxhcml0eSA9IHNlYXJjaENvbmZpZy50ZXJtU2ltaWxhcml0eVxuICAgID8gc2VhcmNoQ29uZmlnLnRlcm1TaW1pbGFyaXR5XG4gICAgOiAxLjA7XG4gIGNvbnN0IHRlcm1TYXR1cmF0aW9uID0gc2VhcmNoQ29uZmlnLnRlcm1TYXR1cmF0aW9uXG4gICAgPyBzZWFyY2hDb25maWcudGVybVNhdHVyYXRpb25cbiAgICA6IDEuNDtcbiAgY29uc3Qgc3VmZml4ID0gaXNNb2JpbGUgPyBcIm1vYmlsZVwiIDogXCJkZXNrdG9wXCI7XG4gIGNvbnN0IGhlYWRlciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGBoZWFkZXItJHtzdWZmaXh9YCk7XG4gIGNvbnN0IHNlYXJjaElucHV0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoYHNlYXJjaC1pbnB1dC0ke3N1ZmZpeH1gKTtcbiAgY29uc3Qgc2VhcmNoVG9nZ2xlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoYHNlYXJjaC10b2dnbGUtJHtzdWZmaXh9YCk7XG4gIGNvbnN0IHNlYXJjaExvYWRpbmcgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChgc2VhcmNoLWxvYWRpbmctJHtzdWZmaXh9YCk7XG4gIGNvbnN0IHNlYXJjaENsZWFyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoYHNlYXJjaC1jbGVhci0ke3N1ZmZpeH1gKTtcbiAgY29uc3QgYXV0b2NvbXBsZXRlSnMgPSB3aW5kb3cuY29uZmlnW1wiYXV0b2NvbXBsZXRlLm1pbi5qc1wiXTtcbiAgY29uc3QgYWxnb2xpYUpzID0gd2luZG93LmNvbmZpZ1tcImFsZ29saWFzZWFyY2gubWluLmpzXCJdO1xuICBjb25zdCBwYWdlZmluZEpzID0gd2luZG93LmNvbmZpZ1tcInBhZ2VmaW5kLmpzXCJdO1xuICBjb25zdCBmdXNlSnMgPSB3aW5kb3cuY29uZmlnW1wiZnVzZS5taW4uanNcIl07XG4gIGlmIChpc01vYmlsZSkge1xuICAgIHdpbmRvdy5fc2VhcmNoTW9iaWxlT25jZSA9IHRydWU7XG4gICAgLy8gVHVybiBvbiB0aGUgbWFzayB3aGVuIGNsaWNraW5nIG9uIHRoZSBzZWFyY2ggYnV0dG9uXG4gICAgc2VhcmNoSW5wdXQuYWRkRXZlbnRMaXN0ZW5lcihcImZvY3VzXCIsICgpID0+IHtcbiAgICAgIGxvYWRTY3JpcHQoXCJhdXRvY29tcGxldGUtc2NyaXB0XCIsIGF1dG9jb21wbGV0ZUpzLCAoKSA9PiB7XG4gICAgICAgIGluaXRBdXRvc2VhcmNoKCk7XG4gICAgICAgIHNlYXJjaElucHV0LmZvY3VzKCk7XG4gICAgICB9KTtcbiAgICAgIGlmICh3aW5kb3cuY29uZmlnPy5zZWFyY2g/LnR5cGUgPT09IFwiYWxnb2xpYVwiKSB7XG4gICAgICAgIGxvYWRTY3JpcHQoXCJhbGdvbGlhLXNjcmlwdFwiLCBhbGdvbGlhSnMsIG51bGwpO1xuICAgICAgfSBlbHNlIGlmICh3aW5kb3cuY29uZmlnPy5zZWFyY2g/LnR5cGUgPT09IFwiZnVzZVwiKSB7XG4gICAgICAgIGxvYWRTY3JpcHQoXCJmdXNlLXNjcmlwdFwiLCBmdXNlSnMsIG51bGwpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbG9hZFBhZ2VmaW5kKCk7XG4gICAgICB9XG4gICAgICBkb2N1bWVudC5ib2R5LmNsYXNzTGlzdC5hZGQoXCJibHVyXCIpO1xuICAgICAgaGVhZGVyLmNsYXNzTGlzdC5hZGQoXCJvcGVuXCIpO1xuICAgICAgc2VhcmNoSW5wdXQuZm9jdXMoKTtcbiAgICB9KTtcbiAgICAvLyBUdXJuIG9mZiB0aGUgZXZlcnl0aGluZyB3aGVuIGNsaWNraW5nIG9uIHRoZSBjYW5jZWwgYnV0dG9uXG4gICAgZG9jdW1lbnRcbiAgICAgIC5nZXRFbGVtZW50QnlJZChcInNlYXJjaC1jYW5jZWwtbW9iaWxlXCIpXG4gICAgICAuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcbiAgICAgICAgaGVhZGVyLmNsYXNzTGlzdC5yZW1vdmUoXCJvcGVuXCIpO1xuICAgICAgICBkb2N1bWVudC5ib2R5LmNsYXNzTGlzdC5yZW1vdmUoXCJibHVyXCIpO1xuICAgICAgICBkb2N1bWVudFxuICAgICAgICAgIC5nZXRFbGVtZW50QnlJZChcIm1lbnUtdG9nZ2xlLW1vYmlsZVwiKVxuICAgICAgICAgIC5jbGFzc0xpc3QucmVtb3ZlKFwiYWN0aXZlXCIpO1xuICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcIm1lbnUtbW9iaWxlXCIpLmNsYXNzTGlzdC5yZW1vdmUoXCJhY3RpdmVcIik7XG4gICAgICAgIHNlYXJjaExvYWRpbmcuc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xuICAgICAgICBzZWFyY2hDbGVhci5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XG4gICAgICAgIHdpbmRvdy5fc2VhcmNoTW9iaWxlICYmIHdpbmRvdy5fc2VhcmNoTW9iaWxlLmF1dG9jb21wbGV0ZS5zZXRWYWwoXCJcIik7XG4gICAgICB9KTtcbiAgICAvLyBDbGVhciB0aGUgc2VhcmNoIGJveCB3aGVuIGNsaWNraW5nIG9uIHRoZSBjbGVhciBidXR0b25cbiAgICBzZWFyY2hDbGVhci5hZGRFdmVudExpc3RlbmVyKFxuICAgICAgXCJjbGlja1wiLFxuICAgICAgKCkgPT4ge1xuICAgICAgICBzZWFyY2hDbGVhci5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XG4gICAgICAgIHdpbmRvdy5fc2VhcmNoTW9iaWxlICYmIHdpbmRvdy5fc2VhcmNoTW9iaWxlLmF1dG9jb21wbGV0ZS5zZXRWYWwoXCJcIik7XG4gICAgICB9LFxuICAgICAgZmFsc2UsXG4gICAgKTtcbiAgICAvLyBSZW1vdmUgdGhlIG1hc2sgd2hlbiBjbGljayBvbiBpdFxuICAgIHdpbmRvdy5fc2VhcmNoTW9iaWxlT25DbGlja01hc2sgPSAoKSA9PiB7XG4gICAgICBoZWFkZXIuY2xhc3NMaXN0LnJlbW92ZShcIm9wZW5cIik7XG4gICAgICBzZWFyY2hMb2FkaW5nLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcbiAgICAgIHNlYXJjaENsZWFyLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcbiAgICAgIHdpbmRvdy5fc2VhcmNoTW9iaWxlICYmIHdpbmRvdy5fc2VhcmNoTW9iaWxlLmF1dG9jb21wbGV0ZS5zZXRWYWwoXCJcIik7XG4gICAgfTtcbiAgICB3aW5kb3cuY2xpY2tNYXNrRXZlbnRTZXQuYWRkKHdpbmRvdy5fc2VhcmNoTW9iaWxlT25DbGlja01hc2spO1xuICB9IGVsc2Uge1xuICAgIHdpbmRvdy5fc2VhcmNoRGVza3RvcE9uY2UgPSB0cnVlO1xuICAgIC8vIFR1cm4gb24gdGhlIG1hc2sgd2hlbiBjbGlja2luZyBvbiB0aGUgc2VhcmNoIGJ1dHRvblxuICAgIGZ1bmN0aW9uIGxvYWRTZWFyY2hTY3JpcHQoKSB7XG4gICAgICBsb2FkU2NyaXB0KFwiYXV0b2NvbXBsZXRlLXNjcmlwdFwiLCBhdXRvY29tcGxldGVKcywgKCkgPT4ge1xuICAgICAgICBpbml0QXV0b3NlYXJjaCgpO1xuICAgICAgfSk7XG4gICAgICBpZiAod2luZG93LmNvbmZpZz8uc2VhcmNoPy50eXBlID09PSBcImFsZ29saWFcIikge1xuICAgICAgICBsb2FkU2NyaXB0KFwiYWxnb2xpYS1zY3JpcHRcIiwgYWxnb2xpYUpzLCBudWxsKTtcbiAgICAgIH0gZWxzZSBpZiAod2luZG93LmNvbmZpZz8uc2VhcmNoPy50eXBlID09PSBcImZ1c2VcIikge1xuICAgICAgICBsb2FkU2NyaXB0KFwiZnVzZS1zY3JpcHRcIiwgZnVzZUpzLCBudWxsKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxvYWRQYWdlZmluZCgpO1xuICAgICAgfVxuICAgIH1cbiAgICBzZWFyY2hUb2dnbGUuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlb3ZlclwiLCBsb2FkU2VhcmNoU2NyaXB0LCB7IG9uY2U6IHRydWUgfSk7IFxuICAgIHNlYXJjaFRvZ2dsZS5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xuICAgICAgbG9hZFNlYXJjaFNjcmlwdCgpO1xuICAgICAgZG9jdW1lbnQuYm9keS5jbGFzc0xpc3QuYWRkKFwiYmx1clwiKTtcbiAgICAgIGhlYWRlci5jbGFzc0xpc3QuYWRkKFwib3BlblwiKTtcbiAgICAgIHNlYXJjaElucHV0LmZvY3VzKCk7XG4gICAgfSk7XG4gICAgLy8gQ2xlYXIgdGhlIHNlYXJjaCBib3ggd2hlbiBjbGlja2luZyBvbiB0aGUgY2xlYXIgYnV0dG9uXG4gICAgc2VhcmNoQ2xlYXIuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcbiAgICAgIHNlYXJjaENsZWFyLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcbiAgICAgIHdpbmRvdy5fc2VhcmNoRGVza3RvcCAmJiB3aW5kb3cuX3NlYXJjaERlc2t0b3AuYXV0b2NvbXBsZXRlLnNldFZhbChcIlwiKTtcbiAgICB9KTtcbiAgICAvLyBUb2dnbGUgc2VhcmNoIHdoZW4gQ3RybCArIEsgaXMgcHJlc3NlZFxuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJrZXlkb3duXCIsIChlKSA9PiB7XG4gICAgICBpZiAoZS5jdHJsS2V5ICYmIGUuY29kZSA9PT0gXCJLZXlLXCIpIHtcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBzZWFyY2hUb2dnbGUuY2xpY2soKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICAvLyBSZW1vdmUgdGhlIG1hc2sgd2hlbiBjbGljayBvbiBpdFxuICAgIHdpbmRvdy5fc2VhcmNoRGVza3RvcE9uQ2xpY2tNYXNrID0gKCkgPT4ge1xuICAgICAgaGVhZGVyLmNsYXNzTGlzdC5yZW1vdmUoXCJvcGVuXCIpO1xuICAgICAgc2VhcmNoTG9hZGluZy5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XG4gICAgICBzZWFyY2hDbGVhci5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XG4gICAgICB3aW5kb3cuX3NlYXJjaERlc2t0b3AgJiYgd2luZG93Ll9zZWFyY2hEZXNrdG9wLmF1dG9jb21wbGV0ZS5zZXRWYWwoXCJcIik7XG4gICAgfTtcbiAgICB3aW5kb3cuY2xpY2tNYXNrRXZlbnRTZXQuYWRkKHdpbmRvdy5fc2VhcmNoRGVza3RvcE9uQ2xpY2tNYXNrKTtcbiAgfVxuICAvLyBEaXNwbGF5IHRoZSBjbGVhciBidXR0b24gb25seSB3aGVuIHRoZSBzZWFyY2ggYm94IGlzIG5vdCBlbXB0eVxuICBzZWFyY2hJbnB1dC5hZGRFdmVudExpc3RlbmVyKFwiaW5wdXRcIiwgKCkgPT4ge1xuICAgIGlmIChzZWFyY2hJbnB1dC52YWx1ZSA9PT0gXCJcIikgc2VhcmNoQ2xlYXIuc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xuICAgIGVsc2Ugc2VhcmNoQ2xlYXIuc3R5bGUuZGlzcGxheSA9IFwiaW5saW5lXCI7XG4gIH0pO1xuXG4gIGNvbnN0IGluaXRBdXRvc2VhcmNoID0gKCkgPT4ge1xuICAgIGNvbnN0IGF1dG9zZWFyY2ggPSBhdXRvY29tcGxldGUoXG4gICAgICBgI3NlYXJjaC1pbnB1dC0ke3N1ZmZpeH1gLFxuICAgICAge1xuICAgICAgICBoaW50OiBmYWxzZSxcbiAgICAgICAgYXV0b3NlbGVjdDogdHJ1ZSxcbiAgICAgICAgZHJvcGRvd25NZW51Q29udGFpbmVyOiBgI3NlYXJjaC1kcm9wZG93bi0ke3N1ZmZpeH1gLFxuICAgICAgICBjbGVhck9uU2VsZWN0ZWQ6IGZhbHNlLFxuICAgICAgICBjc3NDbGFzc2VzOiB7IG5vUHJlZml4OiB0cnVlIH0sXG4gICAgICAgIGRlYnVnOiB0cnVlLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgbmFtZTogXCJzZWFyY2hcIixcbiAgICAgICAgc291cmNlOiAocXVlcnksIGNhbGxiYWNrKSA9PiB7XG4gICAgICAgICAgc2VhcmNoTG9hZGluZy5zdHlsZS5kaXNwbGF5ID0gXCJpbmxpbmVcIjtcbiAgICAgICAgICBzZWFyY2hDbGVhci5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XG4gICAgICAgICAgY29uc3QgZmluaXNoID0gKHJlc3VsdHMpID0+IHtcbiAgICAgICAgICAgIHNlYXJjaExvYWRpbmcuc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xuICAgICAgICAgICAgc2VhcmNoQ2xlYXIuc3R5bGUuZGlzcGxheSA9IFwiaW5saW5lXCI7XG4gICAgICAgICAgICBjYWxsYmFjayhyZXN1bHRzKTtcbiAgICAgICAgICB9O1xuICAgICAgICAgIGlmIChzZWFyY2hDb25maWcudHlwZSA9PT0gXCJhbGdvbGlhXCIpIHtcbiAgICAgICAgICAgIHdpbmRvdy5fYWxnb2xpYUluZGV4ID1cbiAgICAgICAgICAgICAgd2luZG93Ll9hbGdvbGlhSW5kZXggfHxcbiAgICAgICAgICAgICAgYWxnb2xpYXNlYXJjaChcbiAgICAgICAgICAgICAgICBzZWFyY2hDb25maWcuYWxnb2xpYUFwcElELFxuICAgICAgICAgICAgICAgIHNlYXJjaENvbmZpZy5hbGdvbGlhU2VhcmNoS2V5LFxuICAgICAgICAgICAgICApLmluaXRJbmRleChzZWFyY2hDb25maWcuYWxnb2xpYUluZGV4KTtcbiAgICAgICAgICAgIHdpbmRvdy5fYWxnb2xpYUluZGV4XG4gICAgICAgICAgICAgIC5zZWFyY2gocXVlcnksIHtcbiAgICAgICAgICAgICAgICBvZmZzZXQ6IDAsXG4gICAgICAgICAgICAgICAgbGVuZ3RoOiBtYXhSZXN1bHRMZW5ndGggKiA4LFxuICAgICAgICAgICAgICAgIGF0dHJpYnV0ZXNUb0hpZ2hsaWdodDogW1widGl0bGVcIl0sXG4gICAgICAgICAgICAgICAgYXR0cmlidXRlc1RvUmV0cmlldmU6IFtcIipcIl0sXG4gICAgICAgICAgICAgICAgYXR0cmlidXRlc1RvU25pcHBldDogW2Bjb250ZW50OiR7c25pcHBldExlbmd0aH1gXSxcbiAgICAgICAgICAgICAgICBoaWdobGlnaHRQcmVUYWc6IGA8JHtoaWdobGlnaHRUYWd9PmAsXG4gICAgICAgICAgICAgICAgaGlnaGxpZ2h0UG9zdFRhZzogYDwvJHtoaWdobGlnaHRUYWd9PmAsXG4gICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgIC50aGVuKCh7IGhpdHMgfSkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlc3VsdHMgPSB7fTtcbiAgICAgICAgICAgICAgICBoaXRzLmZvckVhY2goXG4gICAgICAgICAgICAgICAgICAoe1xuICAgICAgICAgICAgICAgICAgICB1cmksXG4gICAgICAgICAgICAgICAgICAgIGRhdGUsXG4gICAgICAgICAgICAgICAgICAgIF9oaWdobGlnaHRSZXN1bHQ6IHsgdGl0bGUgfSxcbiAgICAgICAgICAgICAgICAgICAgX3NuaXBwZXRSZXN1bHQ6IHsgY29udGVudCB9LFxuICAgICAgICAgICAgICAgICAgfSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgICAgICAgcmVzdWx0c1t1cmldICYmXG4gICAgICAgICAgICAgICAgICAgICAgcmVzdWx0c1t1cmldLmNvbnRleHQubGVuZ3RoID4gY29udGVudC52YWx1ZVxuICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICByZXN1bHRzW3VyaV0gPSB7XG4gICAgICAgICAgICAgICAgICAgICAgdXJpLFxuICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiB0aXRsZS52YWx1ZSxcbiAgICAgICAgICAgICAgICAgICAgICBkYXRlLFxuICAgICAgICAgICAgICAgICAgICAgIGNvbnRleHQ6IGNvbnRlbnQudmFsdWUsXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgZmluaXNoKE9iamVjdC52YWx1ZXMocmVzdWx0cykuc2xpY2UoMCwgbWF4UmVzdWx0TGVuZ3RoKSk7XG4gICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgIC5jYXRjaCgoZXJyKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihlcnIpO1xuICAgICAgICAgICAgICAgIGZpbmlzaChbXSk7XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0gZWxzZSBpZiAoc2VhcmNoQ29uZmlnLnR5cGUgPT09IFwiZnVzZVwiKSB7XG4gICAgICAgICAgICBjb25zdCBzZWFyY2ggPSAoKSA9PiB7XG4gICAgICAgICAgICAgIGNvbnN0IHJlc3VsdHMgPSB7fTtcbiAgICAgICAgICAgICAgd2luZG93Ll9mdXNlSW5kZXhcbiAgICAgICAgICAgICAgICAuc2VhcmNoKHF1ZXJ5KVxuICAgICAgICAgICAgICAgIC5mb3JFYWNoKCh7IGl0ZW0sIHJlZkluZGV4LCBtYXRjaGVzIH0pID0+IHtcbiAgICAgICAgICAgICAgICAgIGxldCB0aXRsZSA9IGl0ZW0udGl0bGU7XG4gICAgICAgICAgICAgICAgICBsZXQgY29udGVudCA9IGl0ZW0uY29udGVudDtcbiAgICAgICAgICAgICAgICAgIG1hdGNoZXMuZm9yRWFjaCgoeyBpbmRpY2VzLCB2YWx1ZSwga2V5IH0pID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGtleSA9PT0gXCJjb250ZW50XCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICBsZXQgb2Zmc2V0ID0gMDtcbiAgICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGluZGljZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHN1YnN0ciA9IGNvbnRlbnQuc3Vic3RyaW5nKFxuICAgICAgICAgICAgICAgICAgICAgICAgICBpbmRpY2VzW2ldWzBdICsgb2Zmc2V0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICBpbmRpY2VzW2ldWzFdICsgMSArIG9mZnNldCxcbiAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0YWcgPVxuICAgICAgICAgICAgICAgICAgICAgICAgICBgPCR7aGlnaGxpZ2h0VGFnfT5gICsgc3Vic3RyICsgYDwvJHtoaWdobGlnaHRUYWd9PmA7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50ID1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudC5zdWJzdHJpbmcoMCwgaW5kaWNlc1tpXVswXSArIG9mZnNldCkgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICB0YWcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50LnN1YnN0cmluZyhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmRpY2VzW2ldWzFdICsgMSArIG9mZnNldCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50Lmxlbmd0aCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9mZnNldCArPSBoaWdobGlnaHRUYWcubGVuZ3RoICogMiArIDU7XG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGtleSA9PT0gXCJ0aXRsZVwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgbGV0IG9mZnNldCA9IDA7XG4gICAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBpbmRpY2VzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBzdWJzdHIgPSB0aXRsZS5zdWJzdHJpbmcoXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGluZGljZXNbaV1bMF0gKyBvZmZzZXQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGluZGljZXNbaV1bMV0gKyAxICsgb2Zmc2V0LFxuICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHRhZyA9XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGA8JHtoaWdobGlnaHRUYWd9PmAgKyBzdWJzdHIgKyBgPC8ke2hpZ2hsaWdodFRhZ30+YDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlID1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGUuc3Vic3RyaW5nKDAsIGluZGljZXNbaV1bMF0gKyBvZmZzZXQpICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdGFnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGUuc3Vic3RyaW5nKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluZGljZXNbaV1bMV0gKyAxICsgb2Zmc2V0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnQubGVuZ3RoLFxuICAgICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICAgICAgb2Zmc2V0ICs9IGhpZ2hsaWdodFRhZy5sZW5ndGggKiAyICsgNTtcbiAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgcmVzdWx0c1tpdGVtLnVyaV0gPSB7XG4gICAgICAgICAgICAgICAgICAgIHVyaTogaXRlbS51cmksXG4gICAgICAgICAgICAgICAgICAgIHRpdGxlLFxuICAgICAgICAgICAgICAgICAgICBkYXRlOiBpdGVtLmRhdGUsXG4gICAgICAgICAgICAgICAgICAgIGNvbnRleHQ6IGNvbnRlbnQsXG4gICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICBjb25zb2xlLmxvZyhyZXN1bHRzKTtcbiAgICAgICAgICAgICAgcmV0dXJuIE9iamVjdC52YWx1ZXMocmVzdWx0cykuc2xpY2UoMCwgbWF4UmVzdWx0TGVuZ3RoKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBpZiAoIXdpbmRvdy5fZnVzZUluZGV4KSB7XG4gICAgICAgICAgICAgIGZldGNoKHNlYXJjaENvbmZpZy5mdXNlSW5kZXhVUkwpXG4gICAgICAgICAgICAgICAgLnRoZW4oKHJlc3BvbnNlKSA9PiByZXNwb25zZS5qc29uKCkpXG4gICAgICAgICAgICAgICAgLnRoZW4oKGRhdGEpID0+IHtcbiAgICAgICAgICAgICAgICAgIGNvbnN0IG9wdGlvbnMgPSB7XG4gICAgICAgICAgICAgICAgICAgIGlzQ2FzZVNlbnNpdGl2ZSxcbiAgICAgICAgICAgICAgICAgICAgZmluZEFsbE1hdGNoZXMsXG4gICAgICAgICAgICAgICAgICAgIG1pbk1hdGNoQ2hhckxlbmd0aCxcbiAgICAgICAgICAgICAgICAgICAgbG9jYXRpb24sXG4gICAgICAgICAgICAgICAgICAgIHRocmVzaG9sZCxcbiAgICAgICAgICAgICAgICAgICAgZGlzdGFuY2UsXG4gICAgICAgICAgICAgICAgICAgIGlnbm9yZUxvY2F0aW9uLFxuICAgICAgICAgICAgICAgICAgICB1c2VFeHRlbmRlZFNlYXJjaCxcbiAgICAgICAgICAgICAgICAgICAgaWdub3JlRmllbGROb3JtLFxuICAgICAgICAgICAgICAgICAgICBpbmNsdWRlU2NvcmU6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICBzaG91bGRTb3J0OiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBpbmNsdWRlTWF0Y2hlczogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAga2V5czogW1wiY29udGVudFwiLCBcInRpdGxlXCJdLFxuICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgIHdpbmRvdy5fZnVzZUluZGV4ID0gbmV3IEZ1c2UoZGF0YSwgb3B0aW9ucyk7XG4gICAgICAgICAgICAgICAgICBmaW5pc2goc2VhcmNoKCkpO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLmNhdGNoKChlcnIpID0+IHtcbiAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcbiAgICAgICAgICAgICAgICAgIGZpbmlzaChbXSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9IGVsc2UgZmluaXNoKHNlYXJjaCgpKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKHdpbmRvdy5fcGdmSW5kZXggPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICBsb2FkUGFnZWZpbmQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHdpbmRvdy5fcGdmSW5kZXguZGVib3VuY2VkU2VhcmNoKHF1ZXJ5LCAzMDApLnRoZW4oKHJlc3ApID0+IHtcbiAgICAgICAgICAgICAgaWYgKHJlc3AgPT09IG51bGwgfHwgIShcInJlc3VsdHNcIiBpbiByZXNwKSkge1xuICAgICAgICAgICAgICAgIGZpbmlzaChbXSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIFByb21pc2UuYWxsKFxuICAgICAgICAgICAgICAgIHJlc3AucmVzdWx0cy5zbGljZSgwLCBtYXhSZXN1bHRMZW5ndGgpLm1hcCgocikgPT4gci5kYXRhKCkpLFxuICAgICAgICAgICAgICApLnRoZW4oKHJlcykgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlc3VsdHMgPSB7fTtcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHIgb2YgcmVzKSB7XG4gICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IF9yIG9mIHIuc3ViX3Jlc3VsdHMpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgICAgICAgIF9yLnVybCA9PT0gdW5kZWZpbmVkIHx8XG4gICAgICAgICAgICAgICAgICAgICAgIShcImFuY2hvclwiIGluIF9yKSB8fFxuICAgICAgICAgICAgICAgICAgICAgIF9yLmFuY2hvci5lbGVtZW50ICE9IFwiaDJcIlxuICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdHNbX3IudXJsXSA9IHtcbiAgICAgICAgICAgICAgICAgICAgICB1cmk6IF9yLnVybCxcbiAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogci5tZXRhLnRpdGxlLFxuICAgICAgICAgICAgICAgICAgICAgIGRhdGU6IHIubWV0YS5kYXRlLFxuICAgICAgICAgICAgICAgICAgICAgIGNvbnRleHQ6XG4gICAgICAgICAgICAgICAgICAgICAgICBoaWdobGlnaHRUYWcgPT09IFwibWFya1wiXG4gICAgICAgICAgICAgICAgICAgICAgICAgID8gX3IuZXhjZXJwdFxuICAgICAgICAgICAgICAgICAgICAgICAgICA6IF9yLmV4Y2VycHQucmVwbGFjZShcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC88bWFyaz4oLio/KTxcXC9tYXJrPi9naSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGA8JHtoaWdobGlnaHRUYWd9PiQxPC8ke2hpZ2hsaWdodFRhZ30+YCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBmaW5pc2goT2JqZWN0LnZhbHVlcyhyZXN1bHRzKSk7XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB0ZW1wbGF0ZXM6IHtcbiAgICAgICAgICBzdWdnZXN0aW9uOiAoeyB0aXRsZSwgdXJpLCBkYXRlLCBjb250ZXh0IH0pID0+XG4gICAgICAgICAgICBgPGRpdj48YSBocmVmPSR7dXJpfT48c3BhbiBjbGFzcz1cInN1Z2dlc3Rpb24tdGl0bGVcIj4ke3RpdGxlfTwvc3Bhbj48L2E+PHNwYW4gY2xhc3M9XCJzdWdnZXN0aW9uLWRhdGVcIj4ke2RhdGV9PC9zcGFuPjwvZGl2PjxkaXYgY2xhc3M9XCJzdWdnZXN0aW9uLWNvbnRleHRcIj4ke2NvbnRleHR9PC9kaXY+YCxcbiAgICAgICAgICBlbXB0eTogKHsgcXVlcnkgfSkgPT5cbiAgICAgICAgICAgIGA8ZGl2IGNsYXNzPVwic2VhcmNoLWVtcHR5XCI+JHtzZWFyY2hDb25maWcubm9SZXN1bHRzRm91bmR9OiA8c3BhbiBjbGFzcz1cInNlYXJjaC1xdWVyeVwiPlwiJHtxdWVyeX1cIjwvc3Bhbj48L2Rpdj5gLFxuICAgICAgICAgIGZvb3RlcjogKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgeyBzZWFyY2hUeXBlLCBpY29uLCBocmVmIH0gPVxuICAgICAgICAgICAgICBzZWFyY2hDb25maWcudHlwZSA9PT0gXCJhbGdvbGlhXCJcbiAgICAgICAgICAgICAgICA/IHtcbiAgICAgICAgICAgICAgICAgICAgc2VhcmNoVHlwZTogXCJhbGdvbGlhXCIsXG4gICAgICAgICAgICAgICAgICAgIGljb246ICc8c3ZnIGNsYXNzPVwiaWNvblwiIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB2aWV3Qm94PVwiMCAwIDQ0OCA1MTJcIj48IS0tIEZvbnQgQXdlc29tZSBGcmVlIDUuMTUuNCBieSBAZm9udGF3ZXNvbWUgLSBodHRwczovL2ZvbnRhd2Vzb21lLmNvbSBMaWNlbnNlIC0gaHR0cHM6Ly9mb250YXdlc29tZS5jb20vbGljZW5zZS9mcmVlIChJY29uczogQ0MgQlkgNC4wLCBGb250czogU0lMIE9GTCAxLjEsIENvZGU6IE1JVCBMaWNlbnNlKSAtLT48cGF0aCBkPVwiTTIyOS4zIDE4Mi42Yy00OS4zIDAtODkuMiAzOS45LTg5LjIgODkuMiAwIDQ5LjMgMzkuOSA4OS4yIDg5LjIgODkuMnM4OS4yLTM5LjkgODkuMi04OS4yYzAtNDkuMy00MC04OS4yLTg5LjItODkuMnptNjIuNyA1Ni42bC01OC45IDMwLjZjLTEuOC45LTMuOC0uNC0zLjgtMi4zVjIwMWMwLTEuNSAxLjMtMi43IDIuNy0yLjYgMjYuMiAxIDQ4LjkgMTUuNyA2MS4xIDM3LjEuNyAxLjMuMiAzLTEuMSAzLjd6TTM4OS4xIDMySDU4LjlDMjYuNCAzMiAwIDU4LjQgMCA5MC45VjQyMWMwIDMyLjYgMjYuNCA1OSA1OC45IDU5SDM4OWMzMi42IDAgNTguOS0yNi40IDU4LjktNTguOVY5MC45QzQ0OCA1OC40IDQyMS42IDMyIDM4OS4xIDMyem0tMjAyLjYgODQuN2MwLTEwLjggOC43LTE5LjUgMTkuNS0xOS41aDQ1LjNjMTAuOCAwIDE5LjUgOC43IDE5LjUgMTkuNXYxNS40YzAgMS44LTEuNyAzLTMuMyAyLjUtMTIuMy0zLjQtMjUuMS01LjEtMzguMS01LjEtMTMuNSAwLTI2LjcgMS44LTM5LjQgNS41LTEuNy41LTMuNC0uOC0zLjQtMi41di0xNS44em0tODQuNCAzN2w5LjItOS4yYzcuNi03LjYgMTkuOS03LjYgMjcuNSAwbDcuNyA3LjdjMS4xIDEuMSAxIDMtLjMgNC02LjIgNC41LTEyLjEgOS40LTE3LjYgMTQuOS01LjQgNS40LTEwLjQgMTEuMy0xNC44IDE3LjQtMSAxLjMtMi45IDEuNS00IC4zbC03LjctNy43Yy03LjYtNy41LTcuNi0xOS44IDAtMjcuNHptMTI3LjIgMjQ0LjhjLTcwIDAtMTI2LjYtNTYuNy0xMjYuNi0xMjYuNnM1Ni43LTEyNi42IDEyNi42LTEyNi42YzcwIDAgMTI2LjYgNTYuNiAxMjYuNiAxMjYuNiAwIDY5LjgtNTYuNyAxMjYuNi0xMjYuNiAxMjYuNnpcIi8+PC9zdmc+JyxcbiAgICAgICAgICAgICAgICAgICAgaHJlZjogXCJodHRwczovL3d3dy5hbGdvbGlhLmNvbS9cIixcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICA6IHNlYXJjaENvbmZpZy50eXBlID09PSBcImZ1c2VcIlxuICAgICAgICAgICAgICAgICAgPyB7XG4gICAgICAgICAgICAgICAgICAgICAgc2VhcmNoVHlwZTogXCJGdXNlLmpzXCIsXG4gICAgICAgICAgICAgICAgICAgICAgaWNvbjogXCJcIixcbiAgICAgICAgICAgICAgICAgICAgICBocmVmOiBcImh0dHBzOi8vZnVzZWpzLmlvL1wiLFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICA6IHtcbiAgICAgICAgICAgICAgICAgICAgICBzZWFyY2hUeXBlOiBcInBhZ2VmaW5kXCIsXG4gICAgICAgICAgICAgICAgICAgICAgaWNvbjogXCJcIixcbiAgICAgICAgICAgICAgICAgICAgICBocmVmOiBcImh0dHBzOi8vcGFnZWZpbmQuYXBwXCIsXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICByZXR1cm4gYDxkaXYgY2xhc3M9XCJzZWFyY2gtZm9vdGVyXCI+U2VhcmNoIGJ5IDxhIGhyZWY9XCIke2hyZWZ9XCIgcmVsPVwibm9vcGVuZXIgbm9yZWZmZXJcIiB0YXJnZXQ9XCJfYmxhbmtcIj4ke2ljb259ICR7c2VhcmNoVHlwZX08L2E+PC9kaXY+YDtcbiAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgICAgfSxcbiAgICApO1xuICAgIGF1dG9zZWFyY2gub24oXG4gICAgICBcImF1dG9jb21wbGV0ZTpzZWxlY3RlZFwiLFxuICAgICAgKGV2ZW50LCBfc3VnZ2VzdGlvbiwgX2RhdGFzZXQsIF9jb250ZXh0KSA9PiB7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICB9LFxuICAgICk7XG4gICAgaWYgKGlzTW9iaWxlKSB3aW5kb3cuX3NlYXJjaE1vYmlsZSA9IGF1dG9zZWFyY2g7XG4gICAgZWxzZSB3aW5kb3cuX3NlYXJjaERlc2t0b3AgPSBhdXRvc2VhcmNoO1xuICB9O1xuICBmdW5jdGlvbiBsb2FkU2NyaXB0KGlkLCB1cmwsIG9ubG9hZCkge1xuICAgIGlmIChkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGAjJHtpZH1gKSA9PT0gbnVsbCkge1xuICAgICAgY29uc3QgaGVhZCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCJoZWFkXCIpO1xuICAgICAgY29uc3Qgc2NyaXB0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNjcmlwdFwiKTtcbiAgICAgIHNjcmlwdC5zZXRBdHRyaWJ1dGUoXCJzcmNcIiwgdXJsKTtcbiAgICAgIHNjcmlwdC5zZXRBdHRyaWJ1dGUoXCJpZFwiLCBpZCk7XG4gICAgICBzY3JpcHQub25sb2FkID0gb25sb2FkO1xuICAgICAgaGVhZC5hcHBlbmRDaGlsZChzY3JpcHQpO1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBsb2FkUGFnZWZpbmQoKSB7XG4gICAgaW1wb3J0KHBhZ2VmaW5kSnMpLnRoZW4oKHApID0+IHtcbiAgICAgIHdpbmRvdy5fcGdmSW5kZXggPSBwO1xuICAgICAgd2luZG93Ll9wZ2ZJbmRleFxuICAgICAgICAub3B0aW9ucyh7XG4gICAgICAgICAgZXhjZXJwdExlbmd0aDogc25pcHBldExlbmd0aCxcbiAgICAgICAgICB0ZXJtRnJlcXVlbmN5OiB0ZXJtRnJlcXVlbmN5LFxuICAgICAgICAgIHBhZ2VMZW5ndGg6IHBhZ2VMZW5ndGgsXG4gICAgICAgICAgdGVybVNpbWlsYXJpdHk6IHRlcm1TaW1pbGFyaXR5LFxuICAgICAgICAgIHRlcm1TYXR1cmF0aW9uOiB0ZXJtU2F0dXJhdGlvbixcbiAgICAgICAgfSlcbiAgICAgICAgLnRoZW4oKCkgPT4ge1xuICAgICAgICAgIHdpbmRvdy5fcGdmSW5kZXguaW5pdCgpO1xuICAgICAgICB9KTtcbiAgICB9KTtcbiAgfVxufVxuXG5mdW5jdGlvbiBpbml0RGV0YWlscygpIHtcbiAgZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIi5kZXRhaWxzXCIpLmZvckVhY2goKCRkZXRhaWxzKSA9PiB7XG4gICAgY29uc3QgJHN1bW1hcnkgPSAkZGV0YWlscy5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKFxuICAgICAgXCJkZXRhaWxzLXN1bW1hcnlcIixcbiAgICApWzBdIGFzIEhUTUxEaXZFbGVtZW50O1xuICAgIGNvbnN0IGNvbnRlbnQgPSAkc3VtbWFyeS5uZXh0RWxlbWVudFNpYmxpbmcgYXMgSFRNTERpdkVsZW1lbnQ7XG4gICAgaWYgKCRkZXRhaWxzLmNsYXNzTGlzdC5jb250YWlucyhcIm9wZW5cIikpIHtcbiAgICAgIGNvbnRlbnQuc3R5bGUubWF4SGVpZ2h0ID0gXCJmaXQtY29udGVudFwiO1xuICAgIH1cbiAgICAkc3VtbWFyeS5hZGRFdmVudExpc3RlbmVyKFxuICAgICAgXCJjbGlja1wiLFxuICAgICAgKCkgPT4ge1xuICAgICAgICBpZiAoJGRldGFpbHMuY2xhc3NMaXN0LmNvbnRhaW5zKFwib3BlblwiKSkge1xuICAgICAgICAgIGNvbnRlbnQuc3R5bGUubWF4SGVpZ2h0ID0gXCIwcHhcIjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjb250ZW50LnN0eWxlLm1heEhlaWdodCA9IFwiZml0LWNvbnRlbnRcIjtcbiAgICAgICAgfVxuICAgICAgICAkZGV0YWlscy5jbGFzc0xpc3QudG9nZ2xlKFwib3BlblwiKTtcbiAgICAgIH0sXG4gICAgICBmYWxzZSxcbiAgICApO1xuICAgIGFkZEV2ZW50TGlzdGVuZXIoXCJiZWZvcmVwcmludFwiLCAoKSA9PiB7XG4gICAgICBpZiAoJGRldGFpbHMuY2xhc3NMaXN0LmNvbnRhaW5zKFwib3BlblwiKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICAkc3VtbWFyeS5jbGljaygpO1xuICAgIH0pO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gaW5pdExpZ2h0R2FsbGVyeSgpIHtcbiAgaWYgKHdpbmRvdy5jb25maWcubGlnaHRHYWxsZXJ5KSB7XG4gICAgbGlnaHRHYWxsZXJ5KFxuICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJjb250ZW50XCIpLFxuICAgICAgd2luZG93LmNvbmZpZy5saWdodEdhbGxlcnksXG4gICAgKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBpbml0VGFibGVzb3J0KCkge1xuICBpZiAod2luZG93LmNvbmZpZz8udGFibGU/LnNvcnQpIHtcbiAgICBkb2N1bWVudFxuICAgICAgLnF1ZXJ5U2VsZWN0b3JBbGwoXCIuY29udGVudCB0YWJsZVwiKVxuICAgICAgLmZvckVhY2goKHRhYmxlKSA9PiBuZXcgVGFibGVzb3J0KHRhYmxlKSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gaW5pdFRvYygpIHtcbiAgY29uc3QgdG9jQ29yZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiVGFibGVPZkNvbnRlbnRzXCIpO1xuICAvLyBSZXR1cm4gZGlyZWN0bHkgaWYgbm8gdG9jXG4gIGlmICh0b2NDb3JlID09PSBudWxsKSByZXR1cm47XG4gIGNvbnN0IGlzVG9jU3RhdGljID1cbiAgICB3aW5kb3cubWF0Y2hNZWRpYSAmJlxuICAgIHdpbmRvdy5tYXRjaE1lZGlhKFwib25seSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDEwMDBweClcIikubWF0Y2hlcztcblxuICBpZiAoXG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJ0b2Mtc3RhdGljXCIpLmdldEF0dHJpYnV0ZShcImtlcHRcIikgfHxcbiAgICBpc1RvY1N0YXRpY1xuICApIHtcbiAgICBpZiAod2luZG93Ll90b2NPblNjcm9sbCkgd2luZG93LnNjcm9sbEV2ZW50U2V0LmRlbGV0ZSh3aW5kb3cuX3RvY09uU2Nyb2xsKTtcbiAgfSBlbHNlIHtcbiAgICBjb25zdCB0b2MgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInRvYy1hdXRvXCIpO1xuICAgIGNvbnN0IHRvY0xpbmtFbGVtZW50cyA9IHRvY0NvcmUucXVlcnlTZWxlY3RvckFsbChcImE6Zmlyc3QtY2hpbGRcIik7XG4gICAgY29uc3QgdG9jTGlFbGVtZW50cyA9IHRvY0NvcmUuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJsaVwiKTtcbiAgICBjb25zdCBoZWFkZXJMaW5rRWxlbWVudHMgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKFxuICAgICAgXCJoZWFkZXJMaW5rXCIsXG4gICAgKSBhcyBIVE1MQ29sbGVjdGlvbk9mPEhUTUxIZWFkaW5nRWxlbWVudD47XG4gICAgY29uc3QgaGVhZGVySXNGaXhlZCA9XG4gICAgICBkb2N1bWVudC5ib2R5LmdldEF0dHJpYnV0ZShcImhlYWRlci1kZXNrdG9wXCIpICE9PSBcIm5vcm1hbFwiO1xuICAgIGNvbnN0IGhlYWRlckhlaWdodCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiaGVhZGVyLWRlc2t0b3BcIikub2Zmc2V0SGVpZ2h0O1xuICAgIGNvbnN0IFRPUF9TUEFDSU5HID0gMjAgKyAoaGVhZGVySXNGaXhlZCA/IGhlYWRlckhlaWdodCA6IDApO1xuICAgIGNvbnN0IG1pblRvY1RvcCA9IHRvYy5vZmZzZXRUb3A7XG4gICAgY29uc3QgbWluU2Nyb2xsVG9wID1cbiAgICAgIG1pblRvY1RvcCAtIFRPUF9TUEFDSU5HICsgKGhlYWRlcklzRml4ZWQgPyAwIDogaGVhZGVySGVpZ2h0KTtcbiAgICB3aW5kb3cuX3RvY09uU2Nyb2xsID1cbiAgICAgIHdpbmRvdy5fdG9jT25TY3JvbGwgfHxcbiAgICAgICgoKSA9PiB7XG4gICAgICAgIGNvbnN0IGZvb3RlclRvcCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwicG9zdC1mb290ZXJcIikub2Zmc2V0VG9wO1xuICAgICAgICBjb25zdCBtYXhUb2NUb3AgPSBmb290ZXJUb3AgLSB0b2MuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkuaGVpZ2h0O1xuICAgICAgICBjb25zdCBtYXhTY3JvbGxUb3AgPVxuICAgICAgICAgIG1heFRvY1RvcCAtIFRPUF9TUEFDSU5HICsgKGhlYWRlcklzRml4ZWQgPyAwIDogaGVhZGVySGVpZ2h0KTtcbiAgICAgICAgaWYgKHdpbmRvdy5uZXdTY3JvbGxUb3AgPCBtaW5TY3JvbGxUb3ApIHtcbiAgICAgICAgICAvLyBJZiBzY3JvbGwgdG8gdGhlIHRvcCBvZiB0aGUgcGFnZVxuICAgICAgICAgIC8vIFNldCB0b2MgdG8gYWJzb2x1dGVcbiAgICAgICAgICB0b2Muc3R5bGUucG9zaXRpb24gPSBcImFic29sdXRlXCI7XG4gICAgICAgICAgdG9jLnN0eWxlLnRvcCA9IGAke21pblRvY1RvcH1weGA7XG4gICAgICAgIH0gZWxzZSBpZiAod2luZG93Lm5ld1Njcm9sbFRvcCA+IG1heFNjcm9sbFRvcCkge1xuICAgICAgICAgIC8vIElmIHNjcm9sbCB0byB0aGUgYm90dG9tIG9mIHRoZSBwYWdlXG4gICAgICAgICAgLy8gU2V0IHRvYyB0byBhYnNvbHV0ZVxuICAgICAgICAgIHRvYy5zdHlsZS5wb3NpdGlvbiA9IFwiYWJzb2x1dGVcIjtcbiAgICAgICAgICB0b2Muc3R5bGUudG9wID0gYCR7bWF4VG9jVG9wfXB4YDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBJZiBpbiB0aGUgbWlkZGxlXG4gICAgICAgICAgLy8gU2V0IHRvYyB0byBmaXhlZCB3aXRoIFRPUF9TUEFDSU5HXG4gICAgICAgICAgdG9jLnN0eWxlLnBvc2l0aW9uID0gXCJmaXhlZFwiO1xuICAgICAgICAgIHRvYy5zdHlsZS50b3AgPSBgJHtUT1BfU1BBQ0lOR31weGA7XG4gICAgICAgIH1cbiAgICAgICAgLy8gVXBkYXRlIHRoZSBhY3RpdmUgdG9jIGxpbmtcbiAgICAgICAgLy8gUmV0dXJuIGRpcmVjdGx5IGlmIG5vIHRvYyBsaW5rXG4gICAgICAgIGlmICh0b2NMaW5rRWxlbWVudHMubGVuZ3RoID09PSAwKSByZXR1cm47XG5cbiAgICAgICAgbGV0IGFjdGl2ZVRvY0luZGV4ID0gLTE7XG4gICAgICAgIGNvbnN0IElOREVYX1NQQUNJTkcgPSBUT1BfU1BBQ0lORyArIHdpbmRvdy5uZXdTY3JvbGxUb3A7XG4gICAgICAgIC8vIElmIHRoZSBJTkRFWF9TUEFDSU5HIGlzIGJlbG93IHRoZSBsYXN0IGhlYWRlciBsaW5rXG4gICAgICAgIC8vIGFjdGl2YXRlIHRoZSBsYXN0IGVsZW1lbnRcbiAgICAgICAgaWYgKGhlYWRlckxpbmtFbGVtZW50cy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgaWYgKFxuICAgICAgICAgICAgaGVhZGVyTGlua0VsZW1lbnRzW2hlYWRlckxpbmtFbGVtZW50cy5sZW5ndGggLSAxXS5vZmZzZXRUb3AgPFxuICAgICAgICAgICAgSU5ERVhfU1BBQ0lOR1xuICAgICAgICAgICkge1xuICAgICAgICAgICAgYWN0aXZlVG9jSW5kZXggPSBoZWFkZXJMaW5rRWxlbWVudHMubGVuZ3RoIC0gMTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gT3RoZXJ3aXNlIGFjdGl2YXRlIHRoZSBlbGVtZW50IHRoYXQgaXMgaW4gYmV0d2VlblxuICAgICAgICAgICAgLy8gVXNlIG9mZnNldFRvcCBpbnN0ZWFkIG9mIGdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLnRvcCBmb3IgYmV0dGVyIHBlcmZvcm1hbmNlXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGhlYWRlckxpbmtFbGVtZW50cy5sZW5ndGggLSAxOyBpKyspIHtcbiAgICAgICAgICAgICAgY29uc3QgdGhpc1RvcCA9IGhlYWRlckxpbmtFbGVtZW50c1tpXS5vZmZzZXRUb3A7XG4gICAgICAgICAgICAgIGNvbnN0IG5leHRUb3AgPSBoZWFkZXJMaW5rRWxlbWVudHNbaSArIDFdLm9mZnNldFRvcDtcbiAgICAgICAgICAgICAgaWYgKHRoaXNUb3AgPD0gSU5ERVhfU1BBQ0lORyAmJiBuZXh0VG9wID4gSU5ERVhfU1BBQ0lORykge1xuICAgICAgICAgICAgICAgIGFjdGl2ZVRvY0luZGV4ID0gaTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBSZW1vdmUgYWxsIGxlZ2FjeSBzdGF0ZXNcbiAgICAgICAgQXJyYXkuZnJvbSh0b2NMaW5rRWxlbWVudHMpLmZvckVhY2goKHRvY0xpbmspID0+XG4gICAgICAgICAgdG9jTGluay5jbGFzc0xpc3QucmVtb3ZlKFwiYWN0aXZlXCIpLFxuICAgICAgICApO1xuICAgICAgICBBcnJheS5mcm9tKHRvY0xpRWxlbWVudHMpLmZvckVhY2goKHRvY0xpKSA9PlxuICAgICAgICAgIHRvY0xpLmNsYXNzTGlzdC5yZW1vdmUoXCJoYXMtYWN0aXZlXCIpLFxuICAgICAgICApO1xuXG4gICAgICAgIC8vIFNldCB0aGUgdG9jTGlua0VsZW1lbnQgdG8gYWN0aXZlXG4gICAgICAgIC8vIGFuZCBhbGwgaXRzIHBhcmVudCB0byBoYXMtYWN0aXZlXG4gICAgICAgIGlmIChhY3RpdmVUb2NJbmRleCA+PSAwICYmIGFjdGl2ZVRvY0luZGV4IDwgdG9jTGlua0VsZW1lbnRzLmxlbmd0aCkge1xuICAgICAgICAgIHRvY0xpbmtFbGVtZW50c1thY3RpdmVUb2NJbmRleF0uY2xhc3NMaXN0LmFkZChcImFjdGl2ZVwiKTtcbiAgICAgICAgICAvLyB0b2NMaW5rRWxlbWVudHNbYWN0aXZlVG9jSW5kZXhdLnNjcm9sbEludG9WaWV3KHtcbiAgICAgICAgICAvLyAgIGJlaGF2aW9yOiAnc21vb3RoJyxcbiAgICAgICAgICAvLyAgIGJsb2NrOiAnY2VudGVyJ1xuICAgICAgICAgIC8vIH0pXG4gICAgICAgICAgbGV0IHBhcmVudCA9IHRvY0xpbmtFbGVtZW50c1thY3RpdmVUb2NJbmRleF0ucGFyZW50RWxlbWVudDtcbiAgICAgICAgICB3aGlsZSAocGFyZW50ICE9PSB0b2NDb3JlKSB7XG4gICAgICAgICAgICBwYXJlbnQuY2xhc3NMaXN0LmFkZChcImhhcy1hY3RpdmVcIik7XG4gICAgICAgICAgICBwYXJlbnQgPSBwYXJlbnQucGFyZW50RWxlbWVudC5wYXJlbnRFbGVtZW50O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgd2luZG93Ll90b2NPblNjcm9sbCgpO1xuICAgIHdpbmRvdy5zY3JvbGxFdmVudFNldC5hZGQod2luZG93Ll90b2NPblNjcm9sbCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gaW5pdFRvY0RpYWxvZygpIHtcbiAgY29uc3QgZGlhbG9nOiBIVE1MRGlhbG9nRWxlbWVudCB8IG51bGwgPVxuICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjdG9jLWRpYWxvZ1wiKTtcbiAgY29uc3Qgb3BlbkJ1dHRvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjdG9jLWRyYXdlci1idXR0b25cIik7XG4gIGlmICghZGlhbG9nIHx8ICFvcGVuQnV0dG9uKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIG9wZW5CdXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcbiAgICBkaWFsb2cuc2hvd01vZGFsKCk7XG4gICAgZG9jdW1lbnQuYWN0aXZlRWxlbWVudD8uYmx1cigpO1xuICB9KTtcbiAgZGlhbG9nLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoZSkgPT4ge1xuICAgIGRpYWxvZy5jbG9zZSgpO1xuICB9KTtcbn1cbmZ1bmN0aW9uIGluaXRNYXBib3goKSB7XG4gIGlmICh3aW5kb3cuY29uZmlnLm1hcGJveCkge1xuICAgIG1hcGJveGdsLmFjY2Vzc1Rva2VuID0gd2luZG93LmNvbmZpZy5tYXBib3guYWNjZXNzVG9rZW47XG4gICAgbWFwYm94Z2wuc2V0UlRMVGV4dFBsdWdpbih3aW5kb3cuY29uZmlnLm1hcGJveC5SVExUZXh0UGx1Z2luKTtcbiAgICB3aW5kb3cuX21hcGJveEFyciA9IHdpbmRvdy5fbWFwYm94QXJyIHx8IFtdO1xuICAgIEFycmF5LmZyb20oZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZShcIm1hcGJveFwiKSkuZm9yRWFjaCgoJG1hcGJveCkgPT4ge1xuICAgICAgY29uc3Qge1xuICAgICAgICBsbmcsXG4gICAgICAgIGxhdCxcbiAgICAgICAgem9vbSxcbiAgICAgICAgbGlnaHRTdHlsZSxcbiAgICAgICAgZGFya1N0eWxlLFxuICAgICAgICBtYXJrZWQsXG4gICAgICAgIG5hdmlnYXRpb24sXG4gICAgICAgIGdlb2xvY2F0ZSxcbiAgICAgICAgc2NhbGUsXG4gICAgICAgIGZ1bGxzY3JlZW4sXG4gICAgICB9ID0gd2luZG93LmNvbmZpZy5kYXRhWyRtYXBib3guaWRdO1xuICAgICAgY29uc3QgbWFwYm94ID0gbmV3IG1hcGJveGdsLk1hcCh7XG4gICAgICAgIGNvbnRhaW5lcjogJG1hcGJveCxcbiAgICAgICAgY2VudGVyOiBbbG5nLCBsYXRdLFxuICAgICAgICB6b29tLFxuICAgICAgICBtaW5ab29tOiAwLjIsXG4gICAgICAgIHN0eWxlOiB3aW5kb3cuaXNEYXJrID8gZGFya1N0eWxlIDogbGlnaHRTdHlsZSxcbiAgICAgICAgYXR0cmlidXRpb25Db250cm9sOiBmYWxzZSxcbiAgICAgIH0pO1xuICAgICAgaWYgKG1hcmtlZCkge1xuICAgICAgICBuZXcgbWFwYm94Z2wuTWFya2VyKCkuc2V0TG5nTGF0KFtsbmcsIGxhdF0pLmFkZFRvKG1hcGJveCk7XG4gICAgICB9XG4gICAgICBpZiAobmF2aWdhdGlvbikge1xuICAgICAgICBtYXBib3guYWRkQ29udHJvbChuZXcgbWFwYm94Z2wuTmF2aWdhdGlvbkNvbnRyb2woKSwgXCJib3R0b20tcmlnaHRcIik7XG4gICAgICB9XG4gICAgICBpZiAoZ2VvbG9jYXRlKSB7XG4gICAgICAgIG1hcGJveC5hZGRDb250cm9sKFxuICAgICAgICAgIG5ldyBtYXBib3hnbC5HZW9sb2NhdGVDb250cm9sKHtcbiAgICAgICAgICAgIHBvc2l0aW9uT3B0aW9uczoge1xuICAgICAgICAgICAgICBlbmFibGVIaWdoQWNjdXJhY3k6IHRydWUsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2hvd1VzZXJMb2NhdGlvbjogdHJ1ZSxcbiAgICAgICAgICAgIHRyYWNrVXNlckxvY2F0aW9uOiB0cnVlLFxuICAgICAgICAgIH0pLFxuICAgICAgICAgIFwiYm90dG9tLXJpZ2h0XCIsXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICBpZiAoc2NhbGUpIHtcbiAgICAgICAgbWFwYm94LmFkZENvbnRyb2wobmV3IG1hcGJveGdsLlNjYWxlQ29udHJvbCgpKTtcbiAgICAgIH1cbiAgICAgIGlmIChmdWxsc2NyZWVuKSB7XG4gICAgICAgIG1hcGJveC5hZGRDb250cm9sKG5ldyBtYXBib3hnbC5GdWxsc2NyZWVuQ29udHJvbCgpKTtcbiAgICAgIH1cbiAgICAgIG1hcGJveC5hZGRDb250cm9sKG5ldyBNYXBib3hMYW5ndWFnZSgpKTtcbiAgICAgIHdpbmRvdy5fbWFwYm94QXJyLnB1c2gobWFwYm94KTtcbiAgICB9KTtcbiAgICB3aW5kb3cuX21hcGJveE9uU3dpdGNoVGhlbWUgPSAoKSA9PiB7XG4gICAgICB3aW5kb3cuX21hcGJveEFyci5mb3JFYWNoKChtYXBib3gpID0+IHtcbiAgICAgICAgY29uc3QgJG1hcGJveCA9IG1hcGJveC5nZXRDb250YWluZXIoKTtcbiAgICAgICAgY29uc3QgeyBsaWdodFN0eWxlLCBkYXJrU3R5bGUgfSA9IHdpbmRvdy5jb25maWcuZGF0YVskbWFwYm94LmlkXTtcbiAgICAgICAgbWFwYm94LnNldFN0eWxlKHdpbmRvdy5pc0RhcmsgPyBkYXJrU3R5bGUgOiBsaWdodFN0eWxlKTtcbiAgICAgICAgbWFwYm94LmFkZENvbnRyb2wobmV3IE1hcGJveExhbmd1YWdlKCkpO1xuICAgICAgfSk7XG4gICAgfTtcbiAgICB3aW5kb3cuc3dpdGNoVGhlbWVFdmVudFNldC5hZGQod2luZG93Ll9tYXBib3hPblN3aXRjaFRoZW1lKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBpbml0VHlwZWl0KCkge1xuICBpZiAod2luZG93LmNvbmZpZy50eXBlaXQpIHtcbiAgICBjb25zdCB0eXBlaXRDb25maWcgPSB3aW5kb3cuY29uZmlnLnR5cGVpdDtcbiAgICBjb25zdCBzcGVlZCA9IHR5cGVpdENvbmZpZy5zcGVlZCA/IHR5cGVpdENvbmZpZy5zcGVlZCA6IDEwMDtcbiAgICBjb25zdCBjdXJzb3JTcGVlZCA9IHR5cGVpdENvbmZpZy5jdXJzb3JTcGVlZFxuICAgICAgPyB0eXBlaXRDb25maWcuY3Vyc29yU3BlZWRcbiAgICAgIDogMTAwMDtcbiAgICBjb25zdCBjdXJzb3JDaGFyID0gdHlwZWl0Q29uZmlnLmN1cnNvckNoYXIgPyB0eXBlaXRDb25maWcuY3Vyc29yQ2hhciA6IFwifFwiO1xuICAgIE9iamVjdC52YWx1ZXModHlwZWl0Q29uZmlnLmRhdGEpLmZvckVhY2goKGdyb3VwKSA9PiB7XG4gICAgICBjb25zdCB0eXBlb25lID0gKGkpID0+IHtcbiAgICAgICAgY29uc3QgaWQgPSBncm91cFtpXTtcbiAgICAgICAgaWYgKCFkb2N1bWVudC5nZXRFbGVtZW50QnlJZChpZCkuaGFzQXR0cmlidXRlKFwiZGF0YS10eXBlaXQtaWRcIikpIHtcbiAgICAgICAgICBjb25zdCBpbnN0YW5jZSA9IG5ldyBUeXBlSXQoYCMke2lkfWAsIHtcbiAgICAgICAgICAgIHN0cmluZ3M6IHdpbmRvdy5jb25maWcuZGF0YVtpZF0sXG4gICAgICAgICAgICBzcGVlZCxcbiAgICAgICAgICAgIGxpZmVMaWtlOiB0cnVlLFxuICAgICAgICAgICAgY3Vyc29yU3BlZWQsXG4gICAgICAgICAgICBjdXJzb3JDaGFyLFxuICAgICAgICAgICAgd2FpdFVudGlsVmlzaWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGFmdGVyQ29tcGxldGU6ICgpID0+IHtcbiAgICAgICAgICAgICAgaWYgKGkgPT09IGdyb3VwLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgICAgICAgICBpZiAodHlwZWl0Q29uZmlnLmR1cmF0aW9uID49IDApIHtcbiAgICAgICAgICAgICAgICAgIHdpbmRvdy5zZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaW5zdGFuY2UuZGVzdHJveSgpO1xuICAgICAgICAgICAgICAgICAgfSwgdHlwZWl0Q29uZmlnLmR1cmF0aW9uKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGluc3RhbmNlLmRlc3Ryb3koKTtcbiAgICAgICAgICAgICAgdHlwZW9uZShpICsgMSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgIH0pLmdvKCk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICB0eXBlb25lKDApO1xuICAgIH0pO1xuICB9XG59XG5cbmZ1bmN0aW9uIGluaXRNZXRhKCkge1xuICBmdW5jdGlvbiBnZXRNZXRhKG1ldGFOYW1lKSB7XG4gICAgY29uc3QgbWV0YXMgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcIm1ldGFcIik7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBtZXRhcy5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKG1ldGFzW2ldLmdldEF0dHJpYnV0ZShcIm5hbWVcIikgPT09IG1ldGFOYW1lKSB7XG4gICAgICAgIHJldHVybiBtZXRhc1tpXTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgY29uc3QgdGhlbWVDb2xvck1ldGEgPSBnZXRNZXRhKFwidGhlbWUtY29sb3JcIik7XG4gIGNvbnN0IG1ldGFDb2xvcnMgPSB7XG4gICAgbGlnaHQ6IFwiI2Y4ZjhmOFwiLFxuICAgIGRhcms6IFwiIzE2MWIyMlwiLFxuICB9O1xuICB3aW5kb3cuX21ldGFUaGVtZUNvbG9yT25Td2l0Y2hUaGVtZSA9ICgpID0+IHtcbiAgICB0aGVtZUNvbG9yTWV0YS5jb250ZW50ID0gbWV0YUNvbG9yc1tkb2N1bWVudC5ib2R5LmdldEF0dHJpYnV0ZShcInRoZW1lXCIpXTtcbiAgfTtcbiAgd2luZG93LnN3aXRjaFRoZW1lRXZlbnRTZXQuYWRkKHdpbmRvdy5fbWV0YVRoZW1lQ29sb3JPblN3aXRjaFRoZW1lKTtcbiAgd2luZG93Ll9tZXRhVGhlbWVDb2xvck9uU3dpdGNoVGhlbWUoKTtcbn1cblxuZnVuY3Rpb24gb25TY3JvbGwoKSB7XG4gIGNvbnN0IGJhY2tUb1RvcCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiYmFjay10by10b3AtYnV0dG9uXCIpO1xuICBmdW5jdGlvbiBoYW5kbGVTY3JvbGxFdmVudCgpIHtcbiAgICB3aW5kb3cubmV3U2Nyb2xsVG9wID0gZ2V0U2Nyb2xsVG9wKCk7XG4gICAgaWYgKHdpbmRvdy5uZXdTY3JvbGxUb3AgPiAyMCkge1xuICAgICAgYmFja1RvVG9wLnN0eWxlLm9wYWNpdHkgPSBcIjFcIjtcbiAgICB9IGVsc2Uge1xuICAgICAgYmFja1RvVG9wLnN0eWxlLm9wYWNpdHkgPSBcIjBcIjtcbiAgICB9XG4gICAgZm9yIChjb25zdCBldmVudCBvZiB3aW5kb3cuc2Nyb2xsRXZlbnRTZXQpIGV2ZW50KCk7XG4gICAgd2luZG93Lm9sZFNjcm9sbFRvcCA9IHdpbmRvdy5uZXdTY3JvbGxUb3A7XG4gIH1cbiAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJzY3JvbGxcIiwgaGFuZGxlU2Nyb2xsRXZlbnQsIGZhbHNlKTtcbn1cblxuZnVuY3Rpb24gb25SZXNpemUoKSB7XG4gIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFxuICAgIFwicmVzaXplXCIsXG4gICAgKCkgPT4ge1xuICAgICAgaWYgKCF3aW5kb3cuX3Jlc2l6ZVRpbWVvdXQpIHtcbiAgICAgICAgd2luZG93Ll9yZXNpemVUaW1lb3V0ID0gd2luZG93LnNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgIHdpbmRvdy5fcmVzaXplVGltZW91dCA9IG51bGw7XG4gICAgICAgICAgZm9yIChjb25zdCBldmVudCBvZiB3aW5kb3cucmVzaXplRXZlbnRTZXQpIGV2ZW50KCk7XG4gICAgICAgICAgaW5pdFNlYXJjaCgpO1xuICAgICAgICB9LCAxMDApO1xuICAgICAgfVxuICAgIH0sXG4gICAgZmFsc2UsXG4gICk7XG59XG5cbmZ1bmN0aW9uIG9uQ2xpY2tNYXNrKCkge1xuICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcIm1hc2tcIikuYWRkRXZlbnRMaXN0ZW5lcihcbiAgICBcImNsaWNrXCIsXG4gICAgKCkgPT4ge1xuICAgICAgZm9yIChjb25zdCBldmVudCBvZiB3aW5kb3cuY2xpY2tNYXNrRXZlbnRTZXQpIGV2ZW50KCk7XG4gICAgICBkb2N1bWVudC5ib2R5LmNsYXNzTGlzdC5yZW1vdmUoXCJibHVyXCIpO1xuICAgIH0sXG4gICAgZmFsc2UsXG4gICk7XG59XG5cbmZ1bmN0aW9uIGluaXRDb2RlYmxvY2tzKCkge1xuICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiLmNvZGUtYmxvY2tcIikuZm9yRWFjaCgoY29kZUJsb2NrKSA9PiB7XG4gICAgLy8gdGhlIHF1ZXJpZXMgYXJlIGd1YXJhbnRlZWQgdG8gYmUgc3VjY2Vzc2Z1bFxuICAgIGNvbnN0IHRpdGxlQnV0dG9uID0gY29kZUJsb2NrLnF1ZXJ5U2VsZWN0b3IoXG4gICAgICBcImJ1dHRvbi5jb2RlLWJsb2NrLWJ1dHRvblwiLFxuICAgICkgYXMgSFRNTERpdkVsZW1lbnQ7XG4gICAgY29uc3QgY2hyb21hID0gY29kZUJsb2NrLnF1ZXJ5U2VsZWN0b3IoXCJjb2RlLmNocm9tYVwiKSBhcyBIVE1MRWxlbWVudDtcbiAgICBjb25zdCBjb3B5Q29kZUJ1dHRvbiA9IGNvZGVCbG9jay5xdWVyeVNlbGVjdG9yKFxuICAgICAgXCJidXR0b24uY29weS1jb2RlLWJ1dHRvblwiLFxuICAgICkgYXMgSFRNTEJ1dHRvbkVsZW1lbnQ7XG4gICAgY29uc3QgY29weUljb24gPSBjb3B5Q29kZUJ1dHRvbi5xdWVyeVNlbGVjdG9yKFxuICAgICAgXCJzcGFuLmNvcHktaWNvblwiLFxuICAgICkgYXMgU1ZHRWxlbWVudDtcbiAgICBjb25zdCBjaGVja0ljb24gPSBjb3B5Q29kZUJ1dHRvbi5xdWVyeVNlbGVjdG9yKFxuICAgICAgXCJzcGFuLmNoZWNrLWljb25cIixcbiAgICApIGFzIFNWR0VsZW1lbnQ7XG4gICAgY29uc3Qgd3JhcENvZGVCdXR0b24gPSBjb2RlQmxvY2sucXVlcnlTZWxlY3RvcihcbiAgICAgIFwiYnV0dG9uLndyYXAtY29kZS1idXR0b25cIixcbiAgICApIGFzIEhUTUxCdXR0b25FbGVtZW50O1xuICAgIGNvbnN0IHRvZ2dsZUxpbmVOdW1iZXJzQnV0dG9uID0gY29kZUJsb2NrLnF1ZXJ5U2VsZWN0b3IoXG4gICAgICBcImJ1dHRvbi5saW5lLW51bWJlci1idXR0b25cIixcbiAgICApIGFzIEhUTUxCdXR0b25FbGVtZW50O1xuXG4gICAgY2hyb21hLnN0eWxlLm1heEhlaWdodCA9IFwiZml0LWNvbnRlbnRcIjtcblxuICAgIC8vIGhhbmRsZSBleHBhbmRpbmcgYW5kIGNvbGxhcHNpbmcgY29kZSBibG9ja3NcbiAgICB0aXRsZUJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xuICAgICAgY29kZUJsb2NrLmNsYXNzTGlzdC50b2dnbGUoXCJpcy1vcGVuXCIpO1xuICAgICAgY29kZUJsb2NrLmNsYXNzTGlzdC50b2dnbGUoXCJpcy1jbG9zZWRcIik7XG4gICAgfSk7XG5cbiAgICAvLyBoYW5kbGUgY29weWluZyBjb2RlIHRvIGNsaXBib2FyZFxuICAgIGNvcHlDb2RlQnV0dG9uPy5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xuICAgICAgbmF2aWdhdG9yLmNsaXBib2FyZC53cml0ZVRleHQoY2hyb21hLnRleHRDb250ZW50KTtcbiAgICAgIC8vIHRvZ2dsZSBpY29uc1xuICAgICAgY29weUljb24uc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xuICAgICAgY2hlY2tJY29uLnN0eWxlLmRpc3BsYXkgPSBcImJsb2NrXCI7XG4gICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgY29weUljb24uc3R5bGUuZGlzcGxheSA9IFwiYmxvY2tcIjtcbiAgICAgICAgY2hlY2tJY29uLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcbiAgICAgIH0sIDMwMDApO1xuICAgIH0pO1xuXG4gICAgLy8gaGFuZGxlIHdyYXBwaW5nIGxpbmVzIGluIGNvZGUgYmxvY2tzXG4gICAgd3JhcENvZGVCdXR0b24/LmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XG4gICAgICBjaHJvbWEuc3R5bGUubWF4SGVpZ2h0ID0gXCJmaXQtY29udGVudFwiO1xuICAgICAgY29kZUJsb2NrLmNsYXNzTGlzdC50b2dnbGUoXCJpcy13cmFwXCIpO1xuICAgIH0pO1xuXG4gICAgdG9nZ2xlTGluZU51bWJlcnNCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcbiAgICAgIGNvZGVCbG9jay5jbGFzc0xpc3QudG9nZ2xlKFwic2hvdy1saW5lLW51bWJlcnNcIik7XG4gICAgfSk7XG5cbiAgICBhZGRFdmVudExpc3RlbmVyKFwiYmVmb3JlcHJpbnRcIiwgKF8pID0+IHtcbiAgICAgIGlmIChjb2RlQmxvY2suY2xhc3NMaXN0LmNvbnRhaW5zKFwiaXMtY2xvc2VkXCIpKSB7XG4gICAgICAgIHRpdGxlQnV0dG9uLmNsaWNrKCk7XG4gICAgICB9XG4gICAgICBpZiAoIWNvZGVCbG9jay5jbGFzc0xpc3QuY29udGFpbnMoXCJpcy13cmFwXCIpKSB7XG4gICAgICAgIHdyYXBDb2RlQnV0dG9uLmNsaWNrKCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBpbml0KCkge1xuICB3aW5kb3cuaXNEYXJrID0gZG9jdW1lbnQuYm9keS5nZXRBdHRyaWJ1dGUoXCJ0aGVtZVwiKSAhPT0gXCJsaWdodFwiO1xuICB3aW5kb3cubmV3U2Nyb2xsVG9wID0gZ2V0U2Nyb2xsVG9wKCk7XG4gIHdpbmRvdy5vbGRTY3JvbGxUb3AgPSB3aW5kb3cubmV3U2Nyb2xsVG9wO1xuICB3aW5kb3cuc2Nyb2xsRXZlbnRTZXQgPSBuZXcgU2V0KCk7XG4gIHdpbmRvdy5yZXNpemVFdmVudFNldCA9IG5ldyBTZXQoKTtcbiAgd2luZG93LmNsaWNrTWFza0V2ZW50U2V0ID0gbmV3IFNldCgpO1xuICBpbml0TWVudU1vYmlsZSgpO1xuICBpbml0U3dpdGNoVGhlbWUoKTtcbiAgaW5pdFNlbGVjdFRoZW1lKCk7XG4gIGluaXRNZXRhKCk7XG4gIGluaXRTZWFyY2goKTtcbiAgaW5pdENvZGVibG9ja3MoKTtcbiAgaW5pdERldGFpbHMoKTtcbiAgaW5pdExpZ2h0R2FsbGVyeSgpO1xuICBpbml0VGFibGVzb3J0KCk7XG4gIGluaXRUeXBlaXQoKTtcbiAgaW5pdE1hcGJveCgpO1xuICBpbml0VG9jKCk7XG4gIGluaXRUb2NEaWFsb2coKTtcbiAgb25TY3JvbGwoKTtcbiAgb25SZXNpemUoKTtcbiAgb25DbGlja01hc2soKTtcbn1cblxuaW5pdCgpO1xuIl0sCiAgIm1hcHBpbmdzIjogIm9FQUFBLElBQUFBLEVBQUFDLEVBQUEsQ0FBQUMsR0FBQUMsSUFBQSxDQUFBQSxFQUFPLFFBQVUsT0FBTyxZQ2N4QixJQUFNQyxHQUFZLElBRWxCLFNBQVNDLEdBQWUsQ0FDdEIsT0FDRyxTQUFTLGlCQUFtQixTQUFTLGdCQUFnQixXQUN0RCxTQUFTLEtBQUssU0FFbEIsQ0FLQSxTQUFTQyxJQUFpQixDQUN4QixJQUFNQyxFQUFtQixTQUFTLGVBQWUsb0JBQW9CLEVBQy9EQyxFQUFhLFNB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QVUsU0FBUyxXQUFXLEdBQzFDQyxFQUFZLE1BQU0sRUFFZkQsRUFBVSxVQUFVLFNBQVMsU0FBUyxHQUN6Q00sRUFBZSxNQUFNLENBRXpCLENBQUMsQ0FDSCxDQUFDLENBQ0gsQ0FFQSxTQUFTRyxJQUFPLENBQ2QsT0FBTyxPQUFTLFNBQVMsS0FBSyxhQUFhLE9BQU8sSUFBTSxRQUN4RCxPQUFPLGFBQWVoSyxFQUFhLEVBQ25DLE9BQU8sYUFBZSxPQUFPLGFBQzdCLE9BQU8sZUFBaUIsSUFBSSxJQUM1QixPQUFPLGVBQWlCLElBQUksSUFDNUIsT0FBTyxrQkFBb0IsSUFBSSxJQUMvQkMsR0FBZSxFQUNmSyxHQUFnQixFQUNoQkksR0FBZ0IsRUFDaEJpSSxHQUFTLEVBQ1Q5SCxFQUFXLEVBQ1h5SSxHQUFlLEVBQ2Y5RCxHQUFZLEVBQ1pHLEdBQWlCLEVBQ2pCQyxHQUFjLEVBQ2R1QyxHQUFXLEVBQ1hiLEdBQVcsRUFDWHhCLEdBQVEsRUFDUnFCLEdBQWMsRUFDZDhCLEdBQVMsRUFDVEcsR0FBUyxFQUNUQyxHQUFZLENBQ2QsQ0FFQVcsR0FBSyIsCiAgIm5hbWVzIjogWyJyZXF1aXJlX3RhYmxlc29ydCIsICJfX2NvbW1vbkpTTWluIiwgImV4cG9ydHMiLCAibW9kdWxlIiwgIlRhYmxlc29ydCIsICJnZXRTY3JvbGxUb3AiLCAiaW5pdE1lbnVNb2JpbGUiLCAibWVudVRvZ2dsZU1vYmlsZSIsICJtZW51TW9iaWxlIiwgInNldENvbG9yVGhlbWUiLCAidGhlbWUiLCAiaW5pdFN3aXRjaFRoZW1lIiwgInRoZW1lU3dpdGNoIiwgImN1cnJlbnRUaGVtZSIsICJldmVudCIsICJpbml0U2VsZWN0VGhlbWUiLCAidGhlbWVTZWxlY3QiLCAiaiIsICJpbml0U2VhcmNoIiwgInNlYXJjaENvbmZpZyIsICJpc01vYmlsZSIsICJtYXhSZXN1bHRMZW5ndGgiLCAic25pcHBldExlbmd0aCIsICJoaWdobGlnaHRUYWciLCAiaXNDYXNlU2Vuc2l0aXZlIiwgIm1pbk1hdGNoQ2hhckxlbmd0aCIsICJmaW5kQWxsTWF0Y2hlcyIsICJsb2NhdGlvbiIsICJ0aHJlc2hvbGQiLCAiZGlzdGFuY2UiLCAiaWdub3JlTG9jYXRpb24iLCAidXNlRXh0ZW5kZWRTZWFyY2giLCAiaWdub3JlRmllbGROb3JtIiwgInRlcm1GcmVxdWVuY3kiLCAicGFnZUxlbmd0aCIsICJ0ZXJtU2ltaWxhcml0eSIsICJ0ZXJtU2F0dXJhdGlvbiIsICJzdWZmaXgiLCAiaGVhZGVyIiwgInNlYXJjaElucHV0IiwgInNlYXJjaFRvZ2dsZSIsICJzZWFyY2hMb2FkaW5nIiwgInNlYXJjaENsZWFyIiwgImF1dG9jb21wbGV0ZUpzIiwgImFsZ29saWFKcyIsICJwYWdlZmluZEpzIiwgImZ1c2VKcyIsICJsb2FkU2NyaXB0IiwgImluaXRBdXRvc2VhcmNoIiwgImxvYWRQYWdlZmluZCIsICJsb2FkU2VhcmNoU2NyaXB0IiwgImUiLCAiYXV0b3NlYXJjaCIsICJxdWVyeSIsICJjYWxsYmFjayIsICJmaW5pc2giLCAicmVzdWx0cyIsICJoaXRzIiwgInVyaSIsICJkYXRlIiwgInRpdGxlIiwgImNvbnRlbnQiLCAiZXJyIiwgInNlYXJjaCIsICJpdGVtIiwgInJlZkluZGV4IiwgIm1hdGNoZXMiLCAiaW5kaWNlcyIsICJ2YWx1ZSIsICJrZXkiLCAib2Zmc2V0IiwgImkiLCAic3Vic3RyIiwgInRhZyIsICJyZXNwb25zZSIsICJkYXRhIiwgIm9wdGlvbnMiLCAicmVzcCIsICJyIiwgInJlcyIsICJfciIsICJjb250ZXh0IiwgInNlYXJjaFR5cGUiLCAiaWNvbiIsICJocmVmIiwgIl9zdWdnZXN0aW9uIiwgIl9kYXRhc2V0IiwgIl9jb250ZXh0IiwgImlkIiwgInVybCIsICJvbmxvYWQiLCAiaGVhZCIsICJzY3JpcHQiLCAiaW5pdERldGFpbHMiLCAiJGRldGFpbHMiLCAiJHN1bW1hcnkiLCAiaW5pdExpZ2h0R2FsbGVyeSIsICJpbml0VGFibGVzb3J0IiwgInRhYmxlIiwgImluaXRUb2MiLCAidG9jQ29yZSIsICJpc1RvY1N0YXRpYyIsICJ0b2MiLCAidG9jTGlua0VsZW1lbnRzIiwgInRvY0xpRWxlbWVudHMiLCAiaGVhZGVyTGlua0VsZW1lbnRzIiwgImhlYWRlcklzRml4ZWQiLCAiaGVhZGVySGVpZ2h0IiwgIlRPUF9TUEFDSU5HIiwgIm1pblRvY1RvcCIsICJtaW5TY3JvbGxUb3AiLCAibWF4VG9jVG9wIiwgIm1heFNjcm9sbFRvcCIsICJhY3RpdmVUb2NJbmRleCIsICJJTkRFWF9TUEFDSU5HIiwgInRoaXNUb3AiLCAibmV4dFRvcCIsICJ0b2NMaW5rIiwgInRvY0xpIiwgInBhcmVudCIsICJpbml0VG9jRGlhbG9nIiwgImRpYWxvZyIsICJvcGVuQnV0dG9uIiwgImluaXRNYXBib3giLCAiJG1hcGJveCIsICJsbmciLCAibGF0IiwgInpvb20iLCAibGlnaHRTdHlsZSIsICJkYXJrU3R5bGUiLCAibWFya2VkIiwgIm5hdmlnYXRpb24iLCAiZ2VvbG9jYXRlIiwgInNjYWxlIiwgImZ1bGxzY3JlZW4iLCAibWFwYm94IiwgImluaXRUeXBlaXQiLCAidHlwZWl0Q29uZmlnIiwgInNwZWVkIiwgImN1cnNvclNwZWVkIiwgImN1cnNvckNoYXIiLCAiZ3JvdXAiLCAidHlwZW9uZSIsICJpbnN0YW5jZSIsICJpbml0TWV0YSIsICJnZXRNZXRhIiwgIm1ldGFOYW1lIiwgIm1ldGFzIiwgInRoZW1lQ29sb3JNZXRhIiwgIm1ldGFDb2xvcnMiLCAib25TY3JvbGwiLCAiYmFja1RvVG9wIiwgImhhbmRsZVNjcm9sbEV2ZW50IiwgIm9uUmVzaXplIiwgIm9uQ2xpY2tNYXNrIiwgImluaXRDb2RlYmxvY2tzIiwgImNvZGVCbG9jayIsICJ0aXRsZUJ1dHRvbiIsICJjaHJvbWEiLCAiY29weUNvZGVCdXR0b24iLCAiY29weUljb24iLCAiY2hlY2tJY29uIiwgIndyYXBDb2RlQnV0dG9uIiwgInRvZ2dsZUxpbmVOdW1iZXJzQnV0dG9uIiwgIl8iLCAiaW5pdCJdCn0K
